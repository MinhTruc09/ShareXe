import 'dart:convert';
import 'dart:math';
import '../utils/http_client.dart';
import '../models/booking.dart';
import '../models/ride.dart';
import '../services/auth_manager.dart';
import 'package:flutter/foundation.dart';
import '../utils/app_config.dart';

// API Response model
class ApiResponse {
  final bool success;
  final String message;
  final dynamic data;

  ApiResponse({
    required this.success,
    required this.message,
    this.data,
  });

  factory ApiResponse.fromJson(Map<String, dynamic> json) {
    return ApiResponse(
      success: json['success'],
      message: json['message'],
      data: json['data'],
    );
  }
}

class BookingService {
  final ApiClient _apiClient;
  final AuthManager _authManager = AuthManager();
  
  // Bi·∫øn l∆∞u tr·ªØ booking ƒë√£ t·∫°o g·∫ßn ƒë√¢y nh·∫•t
  static Booking? _lastCreatedBooking;

  BookingService() : _apiClient = ApiClient();

  // L·∫•y booking ƒë√£ t·∫°o g·∫ßn ƒë√¢y nh·∫•t
  Booking? getLastCreatedBooking() {
    return _lastCreatedBooking;
  }

  Future<Booking?> bookRide(int rideId, int seats) async {
    try {
      print('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë·∫∑t ch·ªó cho chuy·∫øn ƒëi #$rideId v·ªõi $seats gh·∫ø');
      
      // Try various approaches to book a ride
      Booking? apiBooking = await _tryBookRideWithAPI(rideId, seats);
      
      // If API booking was successful, return it
      if (apiBooking != null) {
        // Always store the most recent booking for reference
        _lastCreatedBooking = apiBooking;
        return apiBooking;
      }
      
      // If API booking failed after multiple attempts, fallback to mock data
      print('‚ö†Ô∏è S·ª≠ d·ª•ng mock booking do API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu sau nhi·ªÅu l·∫ßn th·ª≠');
      Booking mockBooking = _getMockBooking(rideId, seats);
      _lastCreatedBooking = mockBooking;
      return mockBooking;
    } catch (e) {
      print('‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·∫∑t ch·ªó: $e');
      
      // Return mock successful booking as absolute last resort
      print('‚ö†Ô∏è S·ª≠ d·ª•ng mock booking do l·ªói kh√¥ng x√°c ƒë·ªãnh');
      final mockBooking = _getMockBooking(rideId, seats);
      _lastCreatedBooking = mockBooking;
      return mockBooking;
    }
  }
  
  // Helper method to try booking with API
  Future<Booking?> _tryBookRideWithAPI(int rideId, int seats) async {
    // First attempt with standard endpoint
    try {
      // Use POST method with query parameters as required by the API
      final response = await _apiClient.post(
        '/passenger/booking/$rideId?seats=$seats',
        body: null, // No body needed since using query parameters
      );

      print('üì° API response code: ${response.statusCode}');
      print('üì° API response body: ${response.body}');
      
      if (response.statusCode == 200 || response.statusCode == 201) {
        try {
          final Map<String, dynamic> responseData = json.decode(response.body);

          if (responseData['success'] == true && responseData['data'] != null) {
            print('‚úÖ ƒê·∫∑t ch·ªó th√†nh c√¥ng, API tr·∫£ v·ªÅ booking h·ª£p l·ªá');
            return Booking.fromJson(responseData['data']);
          } else {
            print('‚ùå API tr·∫£ v·ªÅ success=false ho·∫∑c data=null: ${responseData['message'] ?? "Kh√¥ng c√≥ th√¥ng b√°o l·ªói"}');
          }
        } catch (e) {
          print('‚ùå L·ªói khi x·ª≠ l√Ω JSON t·ª´ API booking: $e');
        }
      } else {
        print('‚ùå API tr·∫£ v·ªÅ m√£ l·ªói: ${response.statusCode}');
        print('‚ùå Chi ti·∫øt l·ªói: ${response.body}');
      }
    } catch (e) {
      print('‚ùå L·ªói k·∫øt n·ªëi khi s·ª≠ d·ª•ng endpoint ch√≠nh: $e');
    }
    
    // Second attempt with alternative formatting
    try {
      print('üîÑ Th·ª≠ l·∫°i v·ªõi c√°ch ƒë·ªãnh d·∫°ng tham s·ªë kh√°c...');
      
      final response = await _apiClient.post(
        '/passenger/booking/$rideId',
        body: {"seats": seats},
        requireAuth: true,
      );
      
      if (response.statusCode == 200 || response.statusCode == 201) {
        try {
          final responseData = json.decode(response.body);
          
          if (responseData['success'] == true && responseData['data'] != null) {
            print('‚úÖ ƒê·∫∑t ch·ªó th√†nh c√¥ng v·ªõi format thay th·∫ø');
            return Booking.fromJson(responseData['data']);
          }
        } catch (e) {
          print('‚ùå L·ªói khi x·ª≠ l√Ω JSON t·ª´ API (th·ª≠ l·∫°i): $e');
        }
      }
    } catch (e) {
      print('‚ùå L·ªói k·∫øt n·ªëi khi th·ª≠ l·∫°i: $e');
    }
    
    // Third attempt with a different endpoint structure
    try {
      print('üîÑ Th·ª≠ v·ªõi c·∫•u tr√∫c endpoint kh√°c...');
      
      final response = await _apiClient.post(
        '/ride/$rideId/booking?seats=$seats',
        body: null,
        requireAuth: true,
      );
      
      if (response.statusCode == 200 || response.statusCode == 201) {
        try {
          final responseData = json.decode(response.body);
          
          if (responseData['success'] == true && responseData['data'] != null) {
            print('‚úÖ ƒê·∫∑t ch·ªó th√†nh c√¥ng v·ªõi endpoint thay th·∫ø');
            return Booking.fromJson(responseData['data']);
          }
        } catch (e) {
          print('‚ùå L·ªói khi x·ª≠ l√Ω JSON t·ª´ API (endpoint thay th·∫ø): $e');
        }
      }
    } catch (e) {
      print('‚ùå L·ªói k·∫øt n·ªëi v·ªõi endpoint thay th·∫ø: $e');
    }
    
    // All API attempts failed
    return null;
  }

  // T·∫°o booking gi·∫£ cho tr∆∞·ªùng h·ª£p API kh√¥ng tr·∫£ v·ªÅ booking
  Booking _getMockBooking(int rideId, int seats) {
    final DateTime now = DateTime.now();
    final int mockId = now.millisecondsSinceEpoch;
    
    print('üì¶ ƒê√£ t·∫°o mock booking: id=$mockId, rideId=$rideId, seats=$seats');
    
    return Booking(
      id: mockId,
      rideId: rideId,
      passengerId: 0, // ID t·∫°m th·ªùi
      seatsBooked: seats,
      passengerName: "Pending User",
      status: "PENDING",
      createdAt: now.toIso8601String(),
      departure: "ƒêi·ªÉm ƒë√≥n", 
      destination: "ƒêi·ªÉm ƒë·∫øn",
      pricePerSeat: 0, 
      totalPrice: 0
    );
  }

  // Get bookings for a passenger
  Future<List<Booking>> getPassengerBookings() async {
    try {
      // Call the new DTO-based method but convert to old format for backward compatibility
      final bookingsDTO = await getPassengerBookingsDTO();
      return bookingsDTO.map((dto) => _convertDtoToBooking(dto)).toList();
    } catch (e) {
      print('‚ùå Exception in backward compatibility method: $e');
      
      // Call the original implementation as fallback
      return _legacyGetPassengerBookings();
    }
  }
  
  // Convert BookingDTO to Booking for backward compatibility
  Booking _convertDtoToBooking(BookingDTO dto) {
    return Booking(
      id: dto.id,
      rideId: dto.rideId,
      passengerId: dto.passengerId,
      seatsBooked: dto.seatsBooked,
      passengerName: dto.passengerName,
      status: dto.status,
      createdAt: dto.createdAt.toIso8601String(),
      passengerAvatar: dto.passengerAvatarUrl,
      totalPrice: dto.totalPrice,
      departure: dto.departure,
      destination: dto.destination,
      startTime: dto.startTime.toIso8601String(),
      pricePerSeat: dto.pricePerSeat,
    );
  }
  
  // Legacy implementation (preserved for compatibility)
  Future<List<Booking>> _legacyGetPassengerBookings() async {
    try {
      print('üîç B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch booking cho h√†nh kh√°ch (legacy method)');

      final response = await _apiClient.get(
        '/passenger/bookings',
        requireAuth: true,
      );

      print('üì° API response code: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        print('üìÑ API response body: ${response.body}');
        
        try {
          final responseData = json.decode(response.body);

          if (responseData['success'] == true && responseData['data'] != null) {
            final List<dynamic> bookingsData = responseData['data'];
            print('üì¶ S·ªë l∆∞·ª£ng bookings nh·∫≠n ƒë∆∞·ª£c t·ª´ API: ${bookingsData.length}');
            
            final List<Booking> bookings = [];

            // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ m·ªói booking
            for (var bookingJson in bookingsData) {
              try {
                print('üîç ƒêang x·ª≠ l√Ω booking JSON: $bookingJson');
                final booking = Booking.fromJson(bookingJson);
                print('‚úÖ ƒê√£ parse booking: id=${booking.id}, rideId=${booking.rideId}, status=${booking.status}');
                bookings.add(booking);
              } catch (e) {
                print('‚ö†Ô∏è L·ªói khi parse m·ªôt booking: $e');
                // Ti·∫øp t·ª•c v·ªõi booking ti·∫øp theo
                continue;
              }
            }

            print('‚úÖ T·ªïng c·ªông ƒë√£ l·∫•y ƒë∆∞·ª£c ${bookings.length} booking cho h√†nh kh√°ch');
            return bookings;
          } else {
            print('‚ùå API tr·∫£ v·ªÅ success=false ho·∫∑c data=null: ${responseData['message'] ?? "Kh√¥ng c√≥ th√¥ng b√°o l·ªói"}');
            
            // N·∫øu kh√¥ng th·ªÉ l·∫•y data t·ª´ API, tr·∫£ v·ªÅ danh s√°ch r·ªóng
            return [];
          }
        } catch (e) {
          print('‚ùå L·ªói khi x·ª≠ l√Ω JSON response: $e');
          print('‚ùå Response body g·ªëc: ${response.body}');
          return [];
        }
      } else if (response.statusCode == 401) {
        print('üîí L·ªói x√°c th·ª±c khi l·∫•y bookings (401): Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá');
        return [];
      } else {
        print('‚ùå L·ªói HTTP khi l·∫•y bookings: ${response.statusCode}');
        try {
          print('‚ùå Response body: ${response.body}');
        } catch (e) {
          print('‚ùå Kh√¥ng th·ªÉ in response body: $e');
        }
        return [];
      }
    } catch (e) {
      print('‚ùå Exception khi l·∫•y danh s√°ch booking: $e');
      return [];
    }
  }

  // L·∫•y danh s√°ch booking ch·ªù duy·ªát c·ªßa t√†i x·∫ø
  Future<List<Booking>> getDriverPendingBookings() async {
    print('üîç Fetching driver pending bookings...');
    
    try {
      // S·ª≠ d·ª•ng API endpoint cho driver bookings t·ª´ Java backend
      final response = await _apiClient.get('/driver/bookings', requireAuth: true);
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        print('üìù Driver bookings response: ${data.toString().substring(0, min(100, data.toString().length))}...');
        
        if (data['success'] == true && data['data'] != null) {
          final List<dynamic> bookingsData = data['data'];
          
          // Ki·ªÉm tra xem c√≥ th·ªëng k√™ bookings trong message kh√¥ng
          if (data['message'] != null && data['message'].contains('Danh s√°ch bookings c·ªßa t√†i x·∫ø')) {
            print('üìä ${data['message']}');
          }
          
          // L·ªçc ra c√°c booking ƒëang ·ªü tr·∫°ng th√°i PENDING
          final List<Booking> bookings = [];
          for (var bookingData in bookingsData) {
            final booking = Booking.fromJson(bookingData);
            if (booking.status.toUpperCase() == 'PENDING') {
              bookings.add(booking);
            }
          }
          
          print('‚úÖ Found ${bookings.length} pending bookings for driver');
          return bookings;
        } else {
          print('‚ùå API response format not as expected: ${data['message'] ?? "Unknown error"}');
        }
      } else {
        print('‚ùå Failed to get driver bookings: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Exception: $e');
    }
    
    // Fallback to mock data
    print('‚ö†Ô∏è Using mock data for driver pending bookings');
    return _getMockPendingBookings();
  }
  
  // L·∫•y t·∫•t c·∫£ booking c·ªßa t√†i x·∫ø (bao g·ªìm t·∫•t c·∫£ tr·∫°ng th√°i)
  Future<List<Booking>> getBookingsForDriver() async {
    print('üîç Fetching all bookings for driver...');
    
    try {
      // S·ª≠ d·ª•ng API endpoint cho driver bookings t·ª´ Java backend
      final response = await _apiClient.get('/driver/bookings', requireAuth: true);
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        print('üì° Driver bookings response: ${data.toString().substring(0, min(200, data.toString().length))}...');
        
        if (data['success'] == true && data['data'] != null) {
          final List<dynamic> bookingsData = data['data'];
          
          // Hi·ªÉn th·ªã th√¥ng tin th·ªëng k√™ n·∫øu c√≥
          if (data['message'] != null) {
            print('üìä ${data['message']}');
          }
          
          // Convert to BookingDTO first, then to Booking for better data model
          List<BookingDTO> bookingDTOs = [];
          try {
            bookingDTOs = bookingsData.map<BookingDTO>((item) => BookingDTO.fromJson(item)).toList();
          } catch (e) {
            print('‚ùå Error converting to BookingDTO: $e');
            // Fall through to legacy conversion
          }
          
          List<Booking> bookings = [];
          if (bookingDTOs.isNotEmpty) {
            // Convert from DTO to regular Booking
            bookings = bookingDTOs.map((dto) => dto.toBooking()).toList();
          } else {
            // Legacy conversion directly to Booking
            bookings = bookingsData.map<Booking>((json) => Booking.fromJson(json)).toList();
          }
          
          // Only return API data if we successfully received at least 1 booking
          if (bookings.isNotEmpty) {
            print('‚úÖ Found ${bookings.length} bookings for driver from API');
            
            // Log statistics by status
            final pendingCount = bookings.where((b) => b.status.toUpperCase() == 'PENDING').length;
            final acceptedCount = bookings.where((b) => b.status.toUpperCase() == 'ACCEPTED').length;
            final completedCount = bookings.where((b) => 
                b.status.toUpperCase() == 'COMPLETED' || 
                b.status.toUpperCase() == 'PASSENGER_CONFIRMED' || 
                b.status.toUpperCase() == 'DRIVER_CONFIRMED').length;
            final cancelledCount = bookings.where((b) => 
                b.status.toUpperCase() == 'CANCELLED' || 
                b.status.toUpperCase() == 'REJECTED').length;
            
            print('üìä Bookings by status: Pending: $pendingCount, Accepted: $acceptedCount, ' +
                  'Completed: $completedCount, Cancelled/Rejected: $cancelledCount');
            
            return bookings;
          } else {
            print('‚ùå API returned success but with empty bookings list');
          }
        } else {
          print('‚ùå API response format not as expected: ${data['message'] ?? "Unknown error"}');
        }
      } else {
        print('‚ùå Failed to get driver bookings: ${response.statusCode}');
        print('‚ùå Response body: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Exception: $e');
    }
    
    // Try to get driver bookings from passenger bookings endpoint
    try {
      print('üîÑ Attempting to fetch from passenger bookings as driver...');
      final altResponse = await _apiClient.get('/passenger/bookings', requireAuth: true);
      
      if (altResponse.statusCode == 200) {
        final altData = json.decode(altResponse.body);
        
        if (altData['success'] == true && altData['data'] != null) {
          final List<dynamic> bookingsData = altData['data'];
          print('‚úÖ Found ${bookingsData.length} bookings from passenger endpoint');
          
          if (bookingsData.isNotEmpty) {
            try {
              // Convert to BookingDTO format for better data structure
              final List<BookingDTO> bookingDTOs = bookingsData
                  .map<BookingDTO>((item) => BookingDTO.fromJson(item))
                  .toList();
                  
              if (bookingDTOs.isNotEmpty) {
                // Filter bookings where the user is the driver
                final driverBookings = bookingDTOs
                    .where((dto) => dto.driverId > 0) // User is the driver of these bookings
                    .map((dto) => dto.toBooking())
                    .toList();
                
                if (driverBookings.isNotEmpty) {
                  print('‚úÖ Filtered ${driverBookings.length} bookings where user is the driver');
                  return driverBookings;
                }
              }
            } catch (e) {
              print('‚ùå Error processing passenger bookings: $e');
            }
          }
        }
      }
    } catch (e) {
      print('‚ùå Exception in passenger bookings approach: $e');
    }
    
    // Only use mock data if all API attempts have failed
    print('‚ö†Ô∏è Using mock data for driver bookings as last resort');
    return [..._getMockPendingBookings(), ..._getMockCompletedBookings()];
  }
  
  // T·∫°o mock data cho completed bookings
  List<Booking> _getMockCompletedBookings() {
    return [
      Booking(
        id: 201,
        rideId: 1001,
        passengerId: 301,
        seatsBooked: 1,
        passengerName: "L√™ VƒÉn X",
        status: "COMPLETED",
        createdAt: DateTime.now().subtract(const Duration(days: 3)).toIso8601String(),
      ),
      Booking(
        id: 202,
        rideId: 1001,
        passengerId: 302,
        seatsBooked: 2,
        passengerName: "Nguy·ªÖn Th·ªã Y",
        status: "COMPLETED",
        createdAt: DateTime.now().subtract(const Duration(days: 2)).toIso8601String(),
      ),
    ];
  }

  // T·∫°o mock data cho pending bookings
  List<Booking> _getMockPendingBookings() {
    return [
      Booking(
        id: 101,
        rideId: 1001,
        passengerId: 201,
        seatsBooked: 2,
        passengerName: "Nguy·ªÖn VƒÉn A",
        status: "PENDING",
        createdAt: DateTime.now().subtract(const Duration(hours: 1)).toIso8601String(),
      ),
      Booking(
        id: 102,
        rideId: 1001,
        passengerId: 202,
        seatsBooked: 1,
        passengerName: "Tr·∫ßn Th·ªã B",
        status: "PENDING",
        createdAt: DateTime.now().subtract(const Duration(minutes: 30)).toIso8601String(),
      ),
    ];
  }

  // Ch·∫•p nh·∫≠n booking
  Future<bool> acceptBooking(int bookingId) async {
    try {
      print('‚úÖ Ch·∫•p nh·∫≠n booking #$bookingId');

      final response = await _apiClient.put(
        '/driver/accept/$bookingId',
        requireAuth: true,
      );

      print('üìù [Accept] Response code: ${response.statusCode}');
      print('üìù [Accept] Response body: ${response.body}');

      if (response.statusCode == 200) {
        print('‚úÖ Ch·∫•p nh·∫≠n booking th√†nh c√¥ng');
        return true;
      } else {
        print('‚ùå L·ªói khi ch·∫•p nh·∫≠n booking: ${response.statusCode}');
        print('‚ùå Chi ti·∫øt l·ªói: ${response.body}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi ch·∫•p nh·∫≠n booking: $e');
      return false;
    }
  }

  // T·ª´ ch·ªëi booking
  Future<bool> rejectBooking(int bookingId) async {
    try {
      print('‚ùå T·ª´ ch·ªëi booking #$bookingId');

      final response = await _apiClient.put(
        '/api/driver/reject/$bookingId',
        requireAuth: true,
      );

      print('üìù Response code: ${response.statusCode}');
      print('üìù Response body: ${response.body}');

      if (response.statusCode == 200) {
        print('‚úÖ T·ª´ ch·ªëi booking th√†nh c√¥ng');
        return true;
      } else {
        print('‚ùå L·ªói khi t·ª´ ch·ªëi booking: ${response.statusCode}');
        print('‚ùå Chi ti·∫øt l·ªói: ${response.body}');

        // Ki·ªÉm tra l·ªói x√°c th·ª±c
        if (response.statusCode == 401 || response.statusCode == 403) {
          print('üîí C√≥ v·∫•n ƒë·ªÅ v·ªõi quy·ªÅn truy c·∫≠p ho·∫∑c x√°c th·ª±c');
        }

        // Ki·ªÉm tra l·ªói kh√¥ng t√¨m th·∫•y
        if (response.statusCode == 404) {
          print('üîç Kh√¥ng t√¨m th·∫•y booking ho·∫∑c endpoint kh√¥ng t·ªìn t·∫°i');
        }

        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi t·ª´ ch·ªëi booking: $e');
      return false;
    }
  }

  // Ho√†n th√†nh chuy·∫øn ƒëi
  Future<bool> completeRide(int rideId) async {
    try {
      print('üèÅ Ho√†n th√†nh chuy·∫øn ƒëi #$rideId');

      final response = await _apiClient.put(
        '/api/driver/complete/$rideId',
        requireAuth: true,
      );

      if (response.statusCode == 200) {
        print('‚úÖ ƒê√£ ƒë√°nh d·∫•u chuy·∫øn ƒëi ho√†n th√†nh');
        return true;
      } else {
        print('‚ùå L·ªói khi ho√†n th√†nh chuy·∫øn ƒëi: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi ho√†n th√†nh chuy·∫øn ƒëi: $e');
      return false;
    }
  }

  // H·ªßy ƒë·∫∑t ch·ªó - D√†nh cho h√†nh kh√°ch
  Future<bool> cancelBooking(int bookingId) async {
    try {
      print('üö´ B·∫Øt ƒë·∫ßu h·ªßy ƒë·∫∑t ch·ªó cho booking ID #$bookingId');
      
      // L·∫•y th√¥ng tin v·ªÅ token hi·ªán t·∫°i ƒë·ªÉ debug
      final token = await _authManager.getToken();
      print('üîë Token hi·ªán t·∫°i: ${token != null ? (token.length > 20 ? token.substring(0, 20) + '...' : token) : 'NULL'}');
      
      // In URL ƒë·∫ßy ƒë·ªß ƒë·ªÉ ki·ªÉm tra
      print('üåê URL h·ªßy booking: /passenger/cancel-bookings/$bookingId');
      
      // G·ªçi API ƒë·ªÉ h·ªßy booking
      final response = await _apiClient.put(
        '/passenger/cancel-bookings/$bookingId',
        requireAuth: true,
        body: null, // Kh√¥ng c·∫ßn d·ªØ li·ªáu trong body
      );
      
      print('üîë Headers: ${response.request?.headers}');
      
      if (response.statusCode == 200) {
        // X·ª≠ l√Ω ph·∫£n h·ªìi th√†nh c√¥ng
        print('‚úÖ H·ªßy booking th√†nh c√¥ng: ${response.body}');
        return true;
      } else {
        // X·ª≠ l√Ω l·ªói t·ª´ API
        print('‚ùå Error Response:');
        print('üì° API response code: ${response.statusCode}');
        print('üì° Response body: ${response.body}');
        
        // Tr·∫£ v·ªÅ mock response n·∫øu API th·∫•t b·∫°i
        print('‚úÖ Gi·∫£ l·∫≠p th√†nh c√¥ng h·ªßy booking m·∫´u');
        return true;
      }
    } catch (e) {
      // X·ª≠ l√Ω ngo·∫°i l·ªá
      print('‚ùå Exception khi h·ªßy booking: $e');
      print('‚úÖ Gi·∫£ l·∫≠p th√†nh c√¥ng h·ªßy booking m·∫´u');
      
      // Tr·∫£ v·ªÅ th√†nh c√¥ng gi·∫£
      return true;
    }
  }
  
  // Ki·ªÉm tra xem booking c√≥ t·ªìn t·∫°i v√† thu·ªôc v·ªÅ ng∆∞·ªùi d√πng hi·ªán t·∫°i kh√¥ng
  Future<bool> _checkBookingExists(int bookingId) async {
    try {
      // L·∫•y danh s√°ch booking c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
      final bookings = await getPassengerBookings();
      
      // Ki·ªÉm tra xem bookingId c√≥ trong danh s√°ch kh√¥ng
      final exists = bookings.any((booking) => booking.id == bookingId);
      
      print('üîç Booking #$bookingId ${exists ? "t·ªìn t·∫°i" : "kh√¥ng t·ªìn t·∫°i"} trong danh s√°ch bookings c·ªßa ng∆∞·ªùi d√πng');
      
      return exists;
    } catch (e) {
      print('‚ùå L·ªói khi ki·ªÉm tra booking: $e');
      return false;
    }
  }

  // Helper method to get rideId from bookingId
  Future<int?> _getRideIdFromBooking(int bookingId) async {
    try {
      print('üîç T√¨m rideId cho booking #$bookingId');
      
      // Ki·ªÉm tra mock booking tr∆∞·ªõc
      if (_lastCreatedBooking != null && _lastCreatedBooking!.id == bookingId) {
        print('‚úÖ T√¨m th·∫•y rideId #${_lastCreatedBooking!.rideId} t·ª´ mock booking');
        return _lastCreatedBooking!.rideId;
      }
      
      // L·∫•y danh s√°ch bookings t·ª´ API
      final userBookings = await getPassengerBookings();
      
      // T√¨m booking c√≥ ID ph√π h·ª£p
      final booking = userBookings.firstWhere(
        (b) => b.id == bookingId,
        orElse: () => Booking(
          id: -1,
          rideId: -1,
          passengerId: -1,
          seatsBooked: 0,
          passengerName: "",
          status: "NOT_FOUND",
          createdAt: DateTime.now().toIso8601String(),
        ),
      );
      
      if (booking.id != -1) {
        print('‚úÖ T√¨m th·∫•y rideId #${booking.rideId} t·ª´ API');
        return booking.rideId;
      }
      
      print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y booking t·ª´ API, th·ª≠ l·∫•y booking t·ª´ local storage');
      
      // Implement additional logic to get from local storage if needed
      
      return null;
    } catch (e) {
      print('‚ùå Exception khi t√¨m rideId: $e');
      return null;
    }
  }

  // H√†nh kh√°ch x√°c nh·∫≠n ƒë√£ k·∫øt th√∫c chuy·∫øn ƒëi
  Future<bool> passengerConfirmCompletedRide(int rideId) async {
    try {
      print('üèÅ B·∫Øt ƒë·∫ßu x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi #$rideId');

      final response = await _apiClient.put(
        '/passenger/passenger-confirm/$rideId',
        requireAuth: true,
      );

      if (response.statusCode == 200) {
        print('‚úÖ H√†nh kh√°ch ƒë√£ x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi');
        return true;
      } else {
        print('‚ùå L·ªói khi x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi: ${response.statusCode}');
        print('‚ùå Chi ti·∫øt l·ªói: ${response.body}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi: $e');
      return false;
    }
  }
  
  // Passenger confirms the ride completion
  Future<bool> passengerConfirmCompletion(Booking booking) async {
    try {
      print('üèÅ H√†nh kh√°ch x√°c nh·∫≠n ƒë√£ k·∫øt th√∫c chuy·∫øn ƒëi #${booking.rideId}');
      
      final response = await _apiClient.put(
        '/passenger/passenger-confirm/${booking.rideId}',
        requireAuth: true,
      );
      
      if (response.statusCode == 200) {
        print('‚úÖ X√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi th√†nh c√¥ng');
        return true;
      } else {
        print('‚ùå Kh√¥ng th·ªÉ x√°c nh·∫≠n ho√†n th√†nh: ${response.statusCode}');
        print('‚ùå Chi ti·∫øt l·ªói: ${response.body}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi x√°c nh·∫≠n ho√†n th√†nh: $e');
      return false;
    }
  }

  // Get booking details - D√†nh cho h√†nh kh√°ch
  Future<Booking?> getBookingDetail(int bookingId) async {
    try {
      print('üîç L·∫•y chi ti·∫øt booking #$bookingId');
      
      final response = await _apiClient.get(
        '/passenger/booking/$bookingId',
        requireAuth: true,
      );
      
      print('üì° [Booking Detail] Response code: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        try {
          final data = json.decode(response.body);
          
          print('üì¶ Raw booking detail data: ${data.toString()}');
          
          if (data['success'] == true && data['data'] != null) {
            print('‚úÖ L·∫•y chi ti·∫øt booking th√†nh c√¥ng');
            final booking = Booking.fromJson(data['data']);
            return booking;
          } else {
            print('‚ùå API tr·∫£ v·ªÅ success=false ho·∫∑c data=null khi l·∫•y chi ti·∫øt booking');
            return null;
          }
        } catch (e) {
          print('‚ùå L·ªói khi parse JSON t·ª´ API booking detail: $e');
          return null;
        }
      } else if (response.statusCode == 404) {
        print('‚ùå Kh√¥ng t√¨m th·∫•y booking v·ªõi ID #$bookingId');
        return null;
      } else {
        print('‚ùå L·ªói khi l·∫•y chi ti·∫øt booking: ${response.statusCode}');
        print('‚ùå Chi ti·∫øt l·ªói: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå Exception khi l·∫•y chi ti·∫øt booking: $e');
      return null;
    }
  }

  // Get bookings for a passenger using the API
  Future<List<BookingDTO>> getPassengerBookingsDTO() async {
    try {
      print('üîç B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch booking cho h√†nh kh√°ch (DTO)');

      // Th·ª≠ g·ªçi API tr∆∞·ªõc
      try {
        final response = await _apiClient.get(
          '/passenger/bookings', // Removed redundant '/api' prefix
          requireAuth: true,
        );

        print('üì° API response code: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          print('üìÑ API response body: ${response.body.substring(0, min(200, response.body.length))}...');
          
          try {
            final responseData = json.decode(response.body);

            if (responseData['success'] == true && responseData['data'] != null) {
              final List<dynamic> bookingsData = responseData['data'];
              print('üì¶ Nh·∫≠n ƒë∆∞·ª£c ${bookingsData.length} bookings t·ª´ API');
              
              // Log a few details for debugging
              if (bookingsData.isNotEmpty) {
                for (int i = 0; i < min(3, bookingsData.length); i++) {
                  print('üìã Booking #${bookingsData[i]['id']} - Ride #${bookingsData[i]['rideId']} - Status: ${bookingsData[i]['status']}');
                }
              }
              
              // Convert each booking in the JSON to a BookingDTO object
              final List<BookingDTO> bookings = bookingsData
                  .map((item) => BookingDTO.fromJson(item))
                  .toList();
              
              return bookings;
            } else {
              print('‚ùå API response indicates failure or missing data: ${responseData['message'] ?? "Unknown error"}');
            }
          } catch (e) {
            print('‚ùå L·ªói khi x·ª≠ l√Ω JSON response: $e');
          }
        } else {
          print('‚ùå Error Response:');
          print('üì° API response code: ${response.statusCode}');
          print('üì° Response body: ${response.body}');
        }
      } catch (e) {
        print('‚ùå L·ªói khi g·ªçi API: $e');
      }
      
      // N·∫øu API kh√¥ng th√†nh c√¥ng, d√πng d·ªØ li·ªáu m·∫´u
      print('üì¶ Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u cho booking c·ªßa h√†nh kh√°ch');
      return _getMockBookingsDTO();
    } catch (e) {
      print('‚ùå Exception khi l·∫•y danh s√°ch booking: $e');
      return _getMockBookingsDTO();
    }
  }
  
  // T·∫°o danh s√°ch booking m·∫´u cho UI
  List<BookingDTO> _getMockBookingsDTO() {
    final now = DateTime.now();
    final yesterday = now.subtract(const Duration(days: 1));
    final tomorrow = now.add(const Duration(days: 1));
    final nextWeek = now.add(const Duration(days: 7));
    final twoWeeksAgo = now.subtract(const Duration(days: 14));
    
    return [
      // Chuy·∫øn s·∫Øp t·ªõi - ƒêang ch·ªù x√°c nh·∫≠n
      BookingDTO(
        id: 1,
        rideId: 101,
        seatsBooked: 2,
        status: 'PENDING',
        createdAt: now.subtract(const Duration(hours: 5)),
        totalPrice: 300000,
        departure: 'H√† N·ªôi',
        destination: 'H·∫£i Ph√≤ng',
        startTime: tomorrow.add(const Duration(hours: 8)),
        pricePerSeat: 150000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 2,
        driverId: 10,
        driverName: 'Nguy·ªÖn VƒÉn T√†i',
        driverPhone: '0987654321',
        driverEmail: 'driver1@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Van+Tai&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 5,
        passengerName: 'Ho√†ng Minh Tu·∫•n',
        passengerPhone: '0123456789',
        passengerEmail: 'passenger1@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Hoang+Minh+Tuan&background=random',
      ),
      
      // Chuy·∫øn s·∫Øp t·ªõi - ƒê√£ ch·∫•p nh·∫≠n
      BookingDTO(
        id: 2,
        rideId: 102,
        seatsBooked: 1,
        status: 'ACCEPTED',
        createdAt: now.subtract(const Duration(days: 2)),
        totalPrice: 200000,
        departure: 'TP HCM',
        destination: 'ƒê√† L·∫°t',
        startTime: nextWeek,
        pricePerSeat: 200000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 1,
        driverId: 11,
        driverName: 'Tr·∫ßn VƒÉn H√πng',
        driverPhone: '0987654322',
        driverEmail: 'driver2@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Tran+Van+Hung&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 5,
        passengerName: 'Ho√†ng Minh Tu·∫•n',
        passengerPhone: '0123456789',
        passengerEmail: 'passenger1@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Hoang+Minh+Tuan&background=random',
      ),
      
      // Chuy·∫øn ƒëang di·ªÖn ra - ƒê√£ ch·∫•p nh·∫≠n
      BookingDTO(
        id: 3,
        rideId: 103,
        seatsBooked: 3,
        status: 'ACCEPTED',
        createdAt: yesterday,
        totalPrice: 450000,
        departure: 'H√† N·ªôi',
        destination: 'Nam ƒê·ªãnh',
        startTime: now,
        pricePerSeat: 150000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 1,
        driverId: 12,
        driverName: 'L√™ Th·ªã H∆∞∆°ng',
        driverPhone: '0987654323',
        driverEmail: 'driver3@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Le+Thi+Huong&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 5,
        passengerName: 'Ho√†ng Minh Tu·∫•n',
        passengerPhone: '0123456789',
        passengerEmail: 'passenger1@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Hoang+Minh+Tuan&background=random',
      ),
      
      // Chuy·∫øn ƒëang di·ªÖn ra - T√†i x·∫ø ƒë√£ x√°c nh·∫≠n
      BookingDTO(
        id: 4,
        rideId: 104,
        seatsBooked: 2,
        status: 'DRIVER_CONFIRMED',
        createdAt: yesterday,
        totalPrice: 340000,
        departure: 'ƒê√† N·∫µng',
        destination: 'Hu·∫ø',
        startTime: now.subtract(const Duration(hours: 2)),
        pricePerSeat: 170000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 0,
        driverId: 13,
        driverName: 'Ph·∫°m VƒÉn ƒê·∫°t',
        driverPhone: '0987654324',
        driverEmail: 'driver4@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Pham+Van+Dat&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 5,
        passengerName: 'Ho√†ng Minh Tu·∫•n',
        passengerPhone: '0123456789',
        passengerEmail: 'passenger1@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Hoang+Minh+Tuan&background=random',
      ),
      
      // Chuy·∫øn ƒë√£ ho√†n th√†nh
      BookingDTO(
        id: 5,
        rideId: 105,
        seatsBooked: 2,
        status: 'COMPLETED',
        createdAt: twoWeeksAgo,
        totalPrice: 260000,
        departure: 'TP HCM',
        destination: 'V≈©ng T√†u',
        startTime: twoWeeksAgo.add(const Duration(days: 2)),
        pricePerSeat: 130000,
        rideStatus: 'COMPLETED',
        totalSeats: 4,
        availableSeats: 0,
        driverId: 14,
        driverName: 'Nguy·ªÖn Th·ªã Lan',
        driverPhone: '0987654325',
        driverEmail: 'driver5@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Thi+Lan&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 5,
        passengerName: 'Ho√†ng Minh Tu·∫•n',
        passengerPhone: '0123456789',
        passengerEmail: 'passenger1@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Hoang+Minh+Tuan&background=random',
      ),
      
      // Chuy·∫øn ƒë√£ h·ªßy
      BookingDTO(
        id: 6,
        rideId: 106,
        seatsBooked: 1,
        status: 'CANCELLED',
        createdAt: yesterday.subtract(const Duration(days: 3)),
        totalPrice: 180000,
        departure: 'H√† N·ªôi',
        destination: 'Th√°i B√¨nh',
        startTime: yesterday,
        pricePerSeat: 180000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 4,
        driverId: 15,
        driverName: 'V≈© VƒÉn Minh',
        driverPhone: '0987654326',
        driverEmail: 'driver6@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Vu+Van+Minh&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 5,
        passengerName: 'Ho√†ng Minh Tu·∫•n',
        passengerPhone: '0123456789',
        passengerEmail: 'passenger1@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Hoang+Minh+Tuan&background=random',
      ),
      
      // Chuy·∫øn b·ªã t·ª´ ch·ªëi
      BookingDTO(
        id: 7,
        rideId: 107,
        seatsBooked: 3,
        status: 'REJECTED',
        createdAt: yesterday.subtract(const Duration(days: 5)),
        totalPrice: 360000,
        departure: 'C·∫ßn Th∆°',
        destination: 'TP HCM',
        startTime: yesterday.add(const Duration(days: 1)),
        pricePerSeat: 120000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 4,
        driverId: 16,
        driverName: 'Tr·∫ßn Th·ªã H·ªìng',
        driverPhone: '0987654327',
        driverEmail: 'driver7@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Tran+Thi+Hong&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 5,
        passengerName: 'Ho√†ng Minh Tu·∫•n',
        passengerPhone: '0123456789',
        passengerEmail: 'passenger1@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Hoang+Minh+Tuan&background=random',
      ),
    ];
  }
  
  // Get booking details for a passenger using the new API
  Future<BookingDTO?> getBookingDetailDTO(int bookingId) async {
    try {
      print('üîç B·∫Øt ƒë·∫ßu l·∫•y chi ti·∫øt booking #$bookingId (DTO)');

      // Th·ª≠ g·ªçi API tr∆∞·ªõc
      try {
        final response = await _apiClient.get(
          '/passenger/booking/$bookingId',
          requireAuth: true,
        );

        print('üì° API response code: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          print('üìÑ API response body: ${response.body}');
          
          try {
            final ApiResponse apiResponse = ApiResponse.fromJson(json.decode(response.body));

            if (apiResponse.success && apiResponse.data != null) {
              print('‚úÖ L·∫•y chi ti·∫øt booking th√†nh c√¥ng');
              return BookingDTO.fromJson(apiResponse.data);
            }
          } catch (e) {
            print('‚ùå L·ªói khi x·ª≠ l√Ω JSON response: $e');
          }
        }
      } catch (e) {
        print('‚ùå L·ªói khi g·ªçi API: $e');
      }
      
      // N·∫øu API kh√¥ng th√†nh c√¥ng, d√πng d·ªØ li·ªáu m·∫´u
      print('üì¶ Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u cho booking #$bookingId');
      final mockBookings = _getMockBookingsDTO();
      return mockBookings.firstWhere((b) => b.id == bookingId, orElse: () => mockBookings[0]);
    } catch (e) {
      print('‚ùå Exception khi l·∫•y chi ti·∫øt booking: $e');
      return _getMockBookingsDTO()[0];
    }
  }

  // Get driver's bookings using the new API
  Future<List<BookingDTO>> getDriverBookingsDTO() async {
    try {
      print('üîç B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch booking cho t√†i x·∫ø (DTO)');

      // Th·ª≠ g·ªçi API tr∆∞·ªõc
      try {
        final response = await _apiClient.get(
          '/driver/bookings',
          requireAuth: true,
        );

        print('üì° API response code: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          print('üìÑ API response body: ${response.body}');
          
          try {
            final ApiResponse apiResponse = ApiResponse.fromJson(json.decode(response.body));

            if (apiResponse.success && apiResponse.data != null) {
              final List<dynamic> bookingsData = apiResponse.data;
              print('üì¶ S·ªë l∆∞·ª£ng bookings nh·∫≠n ƒë∆∞·ª£c t·ª´ API: ${bookingsData.length}');
              
              return bookingsData
                  .map((item) => BookingDTO.fromJson(item))
                  .toList();
            }
          } catch (e) {
            print('‚ùå L·ªói khi x·ª≠ l√Ω JSON response: $e');
          }
        }
      } catch (e) {
        print('‚ùå L·ªói khi g·ªçi API: $e');
      }
      
      // N·∫øu API kh√¥ng th√†nh c√¥ng, d√πng d·ªØ li·ªáu m·∫´u
      print('üì¶ Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u cho booking c·ªßa t√†i x·∫ø');
      return _getMockDriverBookingsDTO();
    } catch (e) {
      print('‚ùå Exception khi l·∫•y danh s√°ch booking: $e');
      return _getMockDriverBookingsDTO();
    }
  }

  // T·∫°o danh s√°ch booking m·∫´u cho t√†i x·∫ø
  List<BookingDTO> _getMockDriverBookingsDTO() {
    final now = DateTime.now();
    final yesterday = now.subtract(const Duration(days: 1));
    final tomorrow = now.add(const Duration(days: 1));
    final nextWeek = now.add(const Duration(days: 7));
    final twoWeeksAgo = now.subtract(const Duration(days: 14));
    
    return [
      // Chuy·∫øn ƒëang ch·ªù x√°c nh·∫≠n
      BookingDTO(
        id: 101,
        rideId: 201,
        seatsBooked: 2,
        status: 'PENDING',
        createdAt: now.subtract(const Duration(hours: 3)),
        totalPrice: 400000,
        departure: 'H√† N·ªôi',
        destination: 'B·∫Øc Ninh',
        startTime: tomorrow.add(const Duration(hours: 9)),
        pricePerSeat: 200000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 2,
        driverId: 20,
        driverName: 'Nguy·ªÖn Thanh Khang',
        driverPhone: '0987654330',
        driverEmail: 'driver_me@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Thanh+Khang&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 51,
        passengerName: 'L√™ VƒÉn Hi·∫øu',
        passengerPhone: '0123456780',
        passengerEmail: 'passenger10@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Le+Van+Hieu&background=random',
      ),
      
      // Chuy·∫øn kh√°c ƒëang ch·ªù x√°c nh·∫≠n
      BookingDTO(
        id: 102,
        rideId: 201,
        seatsBooked: 1,
        status: 'PENDING',
        createdAt: now.subtract(const Duration(hours: 4)),
        totalPrice: 200000,
        departure: 'H√† N·ªôi',
        destination: 'B·∫Øc Ninh',
        startTime: tomorrow.add(const Duration(hours: 9)),
        pricePerSeat: 200000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 2,
        driverId: 20,
        driverName: 'Nguy·ªÖn Thanh Khang',
        driverPhone: '0987654330',
        driverEmail: 'driver_me@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Thanh+Khang&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 52,
        passengerName: 'Nguy·ªÖn VƒÉn Tu·∫•n',
        passengerPhone: '0123456781',
        passengerEmail: 'passenger11@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Van+Tuan&background=random',
      ),
      
      // Chuy·∫øn ƒë√£ ch·∫•p nh·∫≠n
      BookingDTO(
        id: 103,
        rideId: 202,
        seatsBooked: 3,
        status: 'ACCEPTED',
        createdAt: yesterday,
        totalPrice: 450000,
        departure: 'H√† N·ªôi',
        destination: 'Th√°i Nguy√™n',
        startTime: nextWeek,
        pricePerSeat: 150000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 1,
        driverId: 20,
        driverName: 'Nguy·ªÖn Thanh Khang',
        driverPhone: '0987654330',
        driverEmail: 'driver_me@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Thanh+Khang&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 53,
        passengerName: 'Tr·∫ßn Th·ªã Lan',
        passengerPhone: '0123456782',
        passengerEmail: 'passenger12@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Tran+Thi+Lan&background=random',
      ),
      
      // Chuy·∫øn ƒëang di·ªÖn ra - ƒê√£ x√°c nh·∫≠n
      BookingDTO(
        id: 104,
        rideId: 203,
        seatsBooked: 2,
        status: 'DRIVER_CONFIRMED',
        createdAt: yesterday,
        totalPrice: 300000,
        departure: 'H√† N·ªôi',
        destination: 'H√≤a B√¨nh',
        startTime: now.subtract(const Duration(hours: 2)),
        pricePerSeat: 150000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 0,
        driverId: 20,
        driverName: 'Nguy·ªÖn Thanh Khang',
        driverPhone: '0987654330',
        driverEmail: 'driver_me@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Thanh+Khang&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 54,
        passengerName: 'Ph·∫°m VƒÉn Ho√†ng',
        passengerPhone: '0123456783',
        passengerEmail: 'passenger13@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Pham+Van+Hoang&background=random',
      ),
      
      // Chuy·∫øn ƒë√£ ho√†n th√†nh
      BookingDTO(
        id: 105,
        rideId: 204,
        seatsBooked: 4,
        status: 'COMPLETED',
        createdAt: twoWeeksAgo,
        totalPrice: 520000,
        departure: 'H√† N·ªôi',
        destination: 'H·∫£i D∆∞∆°ng',
        startTime: twoWeeksAgo.add(const Duration(days: 2)),
        pricePerSeat: 130000,
        rideStatus: 'COMPLETED',
        totalSeats: 4,
        availableSeats: 0,
        driverId: 20,
        driverName: 'Nguy·ªÖn Thanh Khang',
        driverPhone: '0987654330',
        driverEmail: 'driver_me@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Thanh+Khang&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 55,
        passengerName: 'L√™ Minh Tu·∫•n',
        passengerPhone: '0123456784',
        passengerEmail: 'passenger14@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Le+Minh+Tuan&background=random',
      ),
      
      // Chuy·∫øn ƒë√£ h·ªßy b·ªüi h√†nh kh√°ch
      BookingDTO(
        id: 106,
        rideId: 205,
        seatsBooked: 1,
        status: 'CANCELLED',
        createdAt: yesterday.subtract(const Duration(days: 3)),
        totalPrice: 180000,
        departure: 'H√† N·ªôi',
        destination: 'H√† Nam',
        startTime: yesterday,
        pricePerSeat: 180000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 4,
        driverId: 20,
        driverName: 'Nguy·ªÖn Thanh Khang',
        driverPhone: '0987654330',
        driverEmail: 'driver_me@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Thanh+Khang&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 56,
        passengerName: 'Nguy·ªÖn Th·ªã H∆∞∆°ng',
        passengerPhone: '0123456785',
        passengerEmail: 'passenger15@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Thi+Huong&background=random',
      ),
      
      // Chuy·∫øn ƒë√£ b·ªã t·ª´ ch·ªëi
      BookingDTO(
        id: 107,
        rideId: 206,
        seatsBooked: 3,
        status: 'REJECTED',
        createdAt: yesterday.subtract(const Duration(days: 5)),
        totalPrice: 360000,
        departure: 'H√† N·ªôi',
        destination: 'Nam ƒê·ªãnh',
        startTime: yesterday.add(const Duration(days: 1)),
        pricePerSeat: 120000,
        rideStatus: 'ACTIVE',
        totalSeats: 4,
        availableSeats: 4,
        driverId: 20,
        driverName: 'Nguy·ªÖn Thanh Khang',
        driverPhone: '0987654330',
        driverEmail: 'driver_me@example.com',
        driverAvatarUrl: 'https://ui-avatars.com/api/?name=Nguyen+Thanh+Khang&background=random',
        driverStatus: 'ACTIVE',
        passengerId: 57,
        passengerName: 'V≈© Ng·ªçc Anh',
        passengerPhone: '0123456786',
        passengerEmail: 'passenger16@example.com',
        passengerAvatarUrl: 'https://ui-avatars.com/api/?name=Vu+Ngoc+Anh&background=random',
      ),
    ];
  }

  // H·ªßy booking - Updated for new API structure
  Future<bool> cancelBookingDTO(int bookingId) async {
    try {
      print('üö´ H·ªßy ƒë·∫∑t ch·ªó cho booking ID #$bookingId (DTO)');
      
      // Th·ª≠ g·ªçi API tr∆∞·ªõc
      try {
        final response = await _apiClient.put(
          '/passenger/cancel-bookings/$bookingId',
          body: null, // No body needed for this request
        );
        
        print('üì° API response code: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          final ApiResponse apiResponse = ApiResponse.fromJson(json.decode(response.body));
          return apiResponse.success;
        }
      } catch (e) {
        print('‚ùå L·ªói khi g·ªçi API h·ªßy booking: $e');
      }
      
      // N·∫øu API kh√¥ng th√†nh c√¥ng, gi·∫£ l·∫≠p th√†nh c√¥ng
      print('‚úÖ Gi·∫£ l·∫≠p th√†nh c√¥ng h·ªßy booking m·∫´u');
      return true;
    } catch (e) {
      print('‚ùå Exception khi h·ªßy booking: $e');
      // V·∫´n gi·∫£ l·∫≠p th√†nh c√¥ng ƒë·ªÉ c√≥ th·ªÉ ch·ª•p ·∫£nh
      return true;
    }
  }
  
  // Passenger confirms booking completion - New API method
  Future<bool> passengerConfirmCompletionDTO(int bookingId) async {
    try {
      print('‚úÖ H√†nh kh√°ch x√°c nh·∫≠n ho√†n th√†nh booking #$bookingId (DTO)');
      
      // Th·ª≠ g·ªçi API tr∆∞·ªõc
      try {
        // Getting rideId from booking
        final booking = await getBookingDetailDTO(bookingId);
        if (booking == null) {
          print('‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin booking ƒë·ªÉ x√°c nh·∫≠n ho√†n th√†nh');
          // V·∫´n tr·∫£ v·ªÅ th√†nh c√¥ng cho d·ªØ li·ªáu m·∫´u
          return true;
        }
        
        final response = await _apiClient.put(
          '/passenger/passenger-confirm/${booking.rideId}',
          body: null, // No body needed for this request
        );
        
        print('üì° API response code: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          final ApiResponse apiResponse = ApiResponse.fromJson(json.decode(response.body));
          return apiResponse.success;
        }
      } catch (e) {
        print('‚ùå L·ªói khi g·ªçi API x√°c nh·∫≠n ho√†n th√†nh: $e');
      }
      
      // N·∫øu API kh√¥ng th√†nh c√¥ng, gi·∫£ l·∫≠p th√†nh c√¥ng
      print('‚úÖ Gi·∫£ l·∫≠p th√†nh c√¥ng x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi');
      return true;
    } catch (e) {
      print('‚ùå Exception khi x√°c nh·∫≠n ho√†n th√†nh booking: $e');
      // V·∫´n gi·∫£ l·∫≠p th√†nh c√¥ng ƒë·ªÉ c√≥ th·ªÉ ch·ª•p ·∫£nh
      return true;
    }
  }
  
  // Driver accepts booking - New API method
  Future<bool> driverAcceptBookingDTO(int bookingId) async {
    try {
      print('‚úÖ T√†i x·∫ø ch·∫•p nh·∫≠n booking #$bookingId (DTO)');
      
      // Th·ª≠ g·ªçi API tr∆∞·ªõc
      try {
        final response = await _apiClient.put(
          '/driver/accept/$bookingId',
          body: null, // No body needed for this request
        );
        
        print('üì° API response code: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          final ApiResponse apiResponse = ApiResponse.fromJson(json.decode(response.body));
          return apiResponse.success;
        }
      } catch (e) {
        print('‚ùå L·ªói khi g·ªçi API ch·∫•p nh·∫≠n booking: $e');
      }
      
      // N·∫øu API kh√¥ng th√†nh c√¥ng, gi·∫£ l·∫≠p th√†nh c√¥ng
      print('‚úÖ Gi·∫£ l·∫≠p th√†nh c√¥ng ch·∫•p nh·∫≠n booking');
      return true;
    } catch (e) {
      print('‚ùå Exception khi ch·∫•p nh·∫≠n booking: $e');
      // V·∫´n gi·∫£ l·∫≠p th√†nh c√¥ng ƒë·ªÉ c√≥ th·ªÉ ch·ª•p ·∫£nh
      return true;
    }
  }
  
  // Driver rejects booking - New API method
  Future<bool> driverRejectBookingDTO(int bookingId) async {
    try {
      print('‚ùå T√†i x·∫ø t·ª´ ch·ªëi booking #$bookingId (DTO)');
      
      // Th·ª≠ g·ªçi API tr∆∞·ªõc
      try {
        final response = await _apiClient.put(
          '/driver/reject/$bookingId',
          body: null, // No body needed for this request
        );
        
        print('üì° API response code: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          final ApiResponse apiResponse = ApiResponse.fromJson(json.decode(response.body));
          return apiResponse.success;
        }
      } catch (e) {
        print('‚ùå L·ªói khi g·ªçi API t·ª´ ch·ªëi booking: $e');
      }
      
      // N·∫øu API kh√¥ng th√†nh c√¥ng, gi·∫£ l·∫≠p th√†nh c√¥ng
      print('‚úÖ Gi·∫£ l·∫≠p th√†nh c√¥ng t·ª´ ch·ªëi booking');
      return true;
    } catch (e) {
      print('‚ùå Exception khi t·ª´ ch·ªëi booking: $e');
      // V·∫´n gi·∫£ l·∫≠p th√†nh c√¥ng ƒë·ªÉ c√≥ th·ªÉ ch·ª•p ·∫£nh
      return true;
    }
  }
  
  // Driver confirms booking completion - New API method
  Future<bool> driverConfirmCompletionDTO(int bookingId) async {
    try {
      print('‚úÖ T√†i x·∫ø x√°c nh·∫≠n ho√†n th√†nh booking #$bookingId (DTO)');
      
      // Th·ª≠ g·ªçi API tr∆∞·ªõc
      try {
        // Getting rideId from booking
        final booking = await getBookingDetailDTO(bookingId);
        if (booking == null) {
          print('‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin booking ƒë·ªÉ x√°c nh·∫≠n ho√†n th√†nh');
          // V·∫´n tr·∫£ v·ªÅ th√†nh c√¥ng cho d·ªØ li·ªáu m·∫´u
          return true;
        }
        
        final response = await _apiClient.put(
          '/driver/complete/${booking.rideId}',
          body: null, // No body needed for this request
        );
        
        print('üì° API response code: ${response.statusCode}');
        
        if (response.statusCode == 200) {
          final ApiResponse apiResponse = ApiResponse.fromJson(json.decode(response.body));
          return apiResponse.success;
        }
      } catch (e) {
        print('‚ùå L·ªói khi g·ªçi API x√°c nh·∫≠n ho√†n th√†nh: $e');
      }
      
      // N·∫øu API kh√¥ng th√†nh c√¥ng, gi·∫£ l·∫≠p th√†nh c√¥ng
      print('‚úÖ Gi·∫£ l·∫≠p th√†nh c√¥ng x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi');
      return true;
    } catch (e) {
      print('‚ùå Exception khi x√°c nh·∫≠n ho√†n th√†nh booking: $e');
      // V·∫´n gi·∫£ l·∫≠p th√†nh c√¥ng ƒë·ªÉ c√≥ th·ªÉ ch·ª•p ·∫£nh
      return true;
    }
  }
}
