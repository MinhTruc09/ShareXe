import 'dart:convert';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import '../models/booking.dart';
import '../models/ride.dart';
import '../utils/http_client.dart';
import 'auth_manager.dart';
import 'package:flutter/foundation.dart';
import '../models/notification_model.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import '../utils/app_config.dart';
import 'package:web_socket_channel/web_socket_channel.dart';
import 'package:web_socket_channel/io.dart';
import 'dart:async';
import 'dart:math';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;

  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  final FirebaseDatabase _database = FirebaseDatabase.instance;
  final ApiClient _apiClient;
  final AuthManager _authManager = AuthManager();
  final AppConfig _appConfig = AppConfig();
  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();

  // Th√™m WebSocket ƒë·ªÉ nh·∫≠n th√¥ng b√°o realtime
  WebSocketChannel? _socketChannel;
  StreamSubscription? _socketSubscription;
  
  // Add new fields for WebSocket connection management
  bool _isConnecting = false;
  int _reconnectAttempt = 0;
  Timer? _reconnectTimer;
  final int _maxReconnectDelay = 300; // Maximum delay of 5 minutes (300 seconds)
  final bool _isConnected = false;

  // Stream controller ƒë·ªÉ ph√°t th√¥ng b√°o m·ªõi ƒë·∫øn to√†n b·ªô ·ª©ng d·ª•ng
  final _notificationController =
      StreamController<NotificationModel>.broadcast();
  Stream<NotificationModel> get notificationStream =>
      _notificationController.stream;

  // Stream cho t·ª´ng lo·∫°i th√¥ng b√°o c·ª• th·ªÉ
  final _bookingNotificationController =
      StreamController<NotificationModel>.broadcast();
  final _messageNotificationController =
      StreamController<NotificationModel>.broadcast();
  final _driverNotificationController =
      StreamController<NotificationModel>.broadcast();

  Stream<NotificationModel> get bookingNotificationStream =>
      _bookingNotificationController.stream;
  Stream<NotificationModel> get messageNotificationStream =>
      _messageNotificationController.stream;
  Stream<NotificationModel> get driverNotificationStream =>
      _driverNotificationController.stream;

  NotificationService._internal() : _apiClient = ApiClient();

  // Initialize Firebase Cloud Messaging
  Future<void> initialize(BuildContext? context, String baseUrl) async {
    if (baseUrl.isNotEmpty) {
      _appConfig.updateBaseUrl(baseUrl);
    }

    // Request permission for notifications (iOS)
    NotificationSettings settings = await _firebaseMessaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
    );

    if (kDebugMode) {
      print(
        'User granted notification permission: ${settings.authorizationStatus}',
      );
    }

    // Listen for FCM token refreshes
    FirebaseMessaging.instance.onTokenRefresh.listen((fcmToken) {
      if (kDebugMode) {
        print('FCM Token: $fcmToken');
      }
      _updateFcmToken(fcmToken);
    });

    // H√†m x·ª≠ l√Ω th√¥ng b√°o khi ·ª©ng d·ª•ng ƒëang ch·∫°y
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      if (kDebugMode) {
        print('Got a message whilst in the foreground!');
        print('Message data: ${message.data}');
      }

      if (message.notification != null) {
        // X·ª≠ l√Ω hi·ªÉn th·ªã th√¥ng b√°o
        _handleForegroundMessage(message);

        // Chuy·ªÉn th√¥ng b√°o th√†nh NotificationModel n·∫øu c·∫ßn
        if (message.data.containsKey('id')) {
          try {
            final notification = NotificationModel(
              id: int.parse(message.data['id'] ?? '0'),
              userEmail: message.data['userEmail'] ?? '',
              title: message.notification?.title ?? '',
              content: message.notification?.body ?? '',
              type: message.data['type'] ?? '',
              referenceId: int.parse(message.data['referenceId'] ?? '0'),
              read: false,
              createdAt: DateTime.now(),
            );

            // Ph√°t th√¥ng b√°o ƒë·∫øn stream
            _broadcastNotification(notification);
          } catch (e) {
            if (kDebugMode) {
              print('L·ªói khi x·ª≠ l√Ω th√¥ng b√°o FCM: $e');
            }
          }
        }
      }
    });

    // Handle notification clicks when the app is in the background or terminated
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('A new onMessageOpenedApp event was published!');
      // Handle the notification click, e.g., navigate to a specific screen
      if (message.data['bookingId'] != null) {
        // This would be handled in your app's routing logic
        print('Navigate to booking detail: ${message.data['bookingId']}');
      }
    });

    // Kh·ªüi t·∫°o local notifications
    await _setupLocalNotifications();

    // Get FCM token
    String? token = await FirebaseMessaging.instance.getToken();
    if (token != null) {
      if (kDebugMode) {
        print('FCM Token: $token');
      }
      _updateFcmToken(token);
    }

    // Kh·ªüi t·∫°o k·∫øt n·ªëi WebSocket khi ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
    final isLoggedIn = await _authManager.isLoggedIn();
    if (isLoggedIn) {
      await _setupWebSocketConnection();
    }

    // Ki·ªÉm tra th√¥ng b√°o t·ª´ ch·ªëi t√†i x·∫ø khi kh·ªüi ƒë·ªông app
    if (context != null) {
      WidgetsBinding.instance.addPostFrameCallback((_) async {
        await Future.delayed(
          const Duration(seconds: 2),
        ); // ƒê·ª£i app kh·ªüi ƒë·ªông ho√†n t·∫•t
        await checkDriverRejectionOnStartup(context);
      });
    }
  }

  // Thi·∫øt l·∫≠p k·∫øt n·ªëi WebSocket
  Future<void> _setupWebSocketConnection() async {
    // Don't try to connect if already connecting
    if (_isConnecting) return;
    
    _isConnecting = true;
    
    try {
      // L·∫•y token JWT t·ª´ AuthManager
      final token = await _authManager.getAccessToken();
      if (token == null) {
        _isConnecting = false;
        return;
      }

      // L·∫•y baseUrl t·ª´ AppConfig v√† chuy·ªÉn t·ª´ HTTP sang WebSocket
      String baseUrl = _appConfig.getBaseUrl().replaceFirst('http', 'ws');

      if (kDebugMode) {
        print('üìû Connecting to WebSocket: $baseUrl/ws/notifications');
      }
      
      // K·∫øt n·ªëi ƒë·∫øn WebSocket endpoint v·ªõi token x√°c th·ª±c
      _socketChannel = IOWebSocketChannel.connect(
        Uri.parse('$baseUrl/ws/notifications'),
        headers: {'Authorization': 'Bearer $token'},
        pingInterval: const Duration(seconds: 30), // Keep connection alive with pings
      );

      // ƒêƒÉng k√Ω l·∫Øng nghe tin nh·∫Øn t·ª´ WebSocket
      _socketSubscription = _socketChannel!.stream.listen(
        (dynamic message) {
          // Reset reconnect attempt on successful message
          _reconnectAttempt = 0;
          
          if (kDebugMode) {
            print('üì• Received WebSocket message: $message');
          }

          try {
            final data = json.decode(message as String);
            if (data['type'] == 'NOTIFICATION') {
              final notification = NotificationModel.fromJson(
                data['notification'],
              );

              // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu app ƒëang ch·∫°y
              showLocalNotification(notification);

              // Ph√°t th√¥ng b√°o ƒë·∫øn stream
              _broadcastNotification(notification);
            }
          } catch (e) {
            if (kDebugMode) {
              print('‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω WebSocket message: $e');
            }
          }
        },
        onError: (error) {
          if (kDebugMode) {
            print('‚ö†Ô∏è WebSocket error: $error');
          }
          _handleWebSocketDisconnect();
        },
        onDone: () {
          if (kDebugMode) {
            print('üì¥ WebSocket connection closed');
          }
          _handleWebSocketDisconnect();
        },
      );

      if (kDebugMode) {
        print('‚úÖ WebSocket connection established');
      }
      
      _isConnecting = false;
      
    } catch (e) {
      if (kDebugMode) {
        print('‚ö†Ô∏è L·ªói khi thi·∫øt l·∫≠p WebSocket: $e');
      }
      _isConnecting = false;
      _handleWebSocketDisconnect();
    }
  }
  
  // Handle WebSocket disconnection with exponential backoff
  void _handleWebSocketDisconnect() {
    // Cancel any existing reconnect timer
    _reconnectTimer?.cancel();
    
    // Calculate backoff delay with exponential increase but max limit
    // Formula: min(2^attempt * baseDelay, maxDelay)
    final baseDelay = 1.0; // Start with 1 second
    final randomFactor = 0.5 * Random().nextDouble(); // Add some randomness (0-0.5)
    
    double delaySeconds = baseDelay * pow(1.5, _reconnectAttempt) + randomFactor;
    delaySeconds = min(delaySeconds, _maxReconnectDelay.toDouble());
    
    if (kDebugMode) {
      print('üîÑ Will attempt to reconnect in ${delaySeconds.toStringAsFixed(1)} seconds (attempt ${_reconnectAttempt + 1})');
    }
    
    _reconnectTimer = Timer(Duration(milliseconds: (delaySeconds * 1000).toInt()), () {
      _reconnectAttempt++;
      closeWebSocketConnection(); // Ensure previous connection is fully closed
      _setupWebSocketConnection();
    });
  }

  // ƒê√≥ng k·∫øt n·ªëi WebSocket
  void closeWebSocketConnection() {
    _reconnectTimer?.cancel();
    _reconnectTimer = null;
    _socketSubscription?.cancel();
    _socketChannel?.sink.close();
    _socketChannel = null;
  }

  // Ph√°t th√¥ng b√°o ƒë·∫øn c√°c stream
  void _broadcastNotification(NotificationModel notification) {
    // Ph√°t th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ c√°c subscribers
    _notificationController.add(notification);

    // Ph√°t th√¥ng b√°o ƒë·∫øn stream theo lo·∫°i
    switch (notification.type) {
      case AppConfig.NOTIFICATION_BOOKING_REQUEST:
      case AppConfig.NOTIFICATION_BOOKING_ACCEPTED:
      case AppConfig.NOTIFICATION_BOOKING_REJECTED:
      case AppConfig.NOTIFICATION_BOOKING_CANCELLED:
        _bookingNotificationController.add(notification);
        break;
      case AppConfig.NOTIFICATION_CHAT_MESSAGE:
        _messageNotificationController.add(notification);
        break;
      case AppConfig.NOTIFICATION_DRIVER_APPROVED:
      case AppConfig.NOTIFICATION_DRIVER_REJECTED:
        _driverNotificationController.add(notification);
        break;
    }
  }

  // Dispose streams khi service b·ªã h·ªßy
  void dispose() {
    _socketSubscription?.cancel();
    _socketChannel?.sink.close();
    _notificationController.close();
    _bookingNotificationController.close();
    _messageNotificationController.close();
    _driverNotificationController.close();
  }

  // Th√™m m·ªôt ph∆∞∆°ng th·ª©c ƒë·ªÉ x·ª≠ l√Ω k·∫øt n·ªëi l·∫°i khi login
  Future<void> connectAfterLogin() async {
    await _setupWebSocketConnection();
  }

  // ƒêƒÉng xu·∫•t v√† ƒë√≥ng k·∫øt n·ªëi
  Future<void> disconnectOnLogout() async {
    closeWebSocketConnection();
  }

  // C·∫≠p nh·∫≠t FCM token l√™n server
  Future<void> _updateFcmToken(String token) async {
    try {
      final response = await _apiClient.post(
        '/user/update-fcm-token',
        body: {'token': token},
        requireAuth: true,
      );

      if (response.statusCode != 200) {
        if (kDebugMode) {
          print('L·ªói khi c·∫≠p nh·∫≠t FCM token: ${response.statusCode}');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi c·∫≠p nh·∫≠t FCM token: $e');
      }
    }
  }

  // X·ª≠ l√Ω th√¥ng b√°o khi app ƒëang m·ªü
  void _handleForegroundMessage(RemoteMessage message) {
    RemoteNotification? notification = message.notification;
    AndroidNotification? android = message.notification?.android;

    if (notification != null && android != null) {
      _flutterLocalNotificationsPlugin.show(
        notification.hashCode,
        notification.title,
        notification.body,
        NotificationDetails(
          android: AndroidNotificationDetails(
            'sharexe_channel_id',
            'ShareXE Notifications',
            channelDescription: 'Th√¥ng b√°o t·ª´ ·ª©ng d·ª•ng ShareXE',
            importance: Importance.max,
            priority: Priority.high,
            icon: android.smallIcon,
          ),
          iOS: const DarwinNotificationDetails(),
        ),
        payload: json.encode(message.data),
      );
    }
  }

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o
  void _handleNotificationTap(String? payload) {
    if (payload != null) {
      try {
        final data = json.decode(payload);
        // X·ª≠ l√Ω chuy·ªÉn h∆∞·ªõng d·ª±a tr√™n lo·∫°i th√¥ng b√°o
        if (data['type'] == 'booking_accepted') {
          // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt booking
          // V√≠ d·ª•: navigatorKey.currentState?.pushNamed('/booking-detail', arguments: data['bookingId']);
        } else if (data['type'] == 'chat_message') {
          // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang chat
        }
      } catch (e) {
        if (kDebugMode) {
          print('L·ªói khi x·ª≠ l√Ω notification tap: $e');
        }
      }
    }
  }

  // Set up real-time listener for a specific booking
  Stream<Booking?> setupBookingStatusListener(int bookingId) {
    DatabaseReference bookingRef = _database.ref('bookings/$bookingId');

    return bookingRef.onValue.map((event) {
      if (event.snapshot.value != null) {
        try {
          final data = Map<String, dynamic>.from(event.snapshot.value as Map);
          return Booking.fromJson(data);
        } catch (e) {
          print('Error parsing booking data: $e');
          return null;
        }
      }
      return null;
    });
  }

  // Update booking in Firebase Realtime Database when a driver accepts it
  Future<void> updateBookingStatus(int bookingId, String status) async {
    try {
      DatabaseReference bookingRef = _database.ref('bookings/$bookingId');
      await bookingRef.update({'status': status});
      print('Booking status updated in Firebase Realtime Database');
    } catch (e) {
      print('Error updating booking status in Firebase: $e');
    }
  }

  // Ch·∫•p nh·∫≠n booking (cho driver)
  Future<bool> acceptBooking(int bookingId) async {
    try {
      final response = await _apiClient.post(
        '/driver/accept/$bookingId',
        requireAuth: true,
      );

      return response.statusCode == 200;
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi ch·∫•p nh·∫≠n booking: $e');
      }
      return false;
    }
  }

  // T·ª´ ch·ªëi booking (cho driver)
  Future<bool> rejectBooking(int bookingId) async {
    try {
      final response = await _apiClient.post(
        '/driver/reject/$bookingId',
        requireAuth: true,
      );

      return response.statusCode == 200;
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi t·ª´ ch·ªëi booking: $e');
      }
      return false;
    }
  }

  // L·∫•y danh s√°ch t·∫•t c·∫£ th√¥ng b√°o
  Future<List<NotificationModel>> getNotifications() async {
    try {
      final response = await _apiClient.get(
        '/notifications',
        requireAuth: true,
      );

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        if (jsonResponse['success'] == true && jsonResponse['data'] != null) {
          final List<dynamic> data = jsonResponse['data'];
          return data.map((item) => NotificationModel.fromJson(item)).toList();
        } else {
          return [];
        }
      } else {
        throw Exception('L·ªói khi t·∫£i th√¥ng b√°o: ${response.statusCode}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi l·∫•y th√¥ng b√°o: $e');
      }
      return [];
    }
  }

  // ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
  Future<bool> markAsRead(int notificationId) async {
    try {
      final response = await _apiClient.put(
        '/notifications/$notificationId/read',
        requireAuth: true,
      );

      return response.statusCode == 200;
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi ƒë√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc: $e');
      }
      return false;
    }
  }

  // ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
  Future<bool> markAllAsRead() async {
    try {
      final response = await _apiClient.put(
        '/notifications/read-all',
        requireAuth: true,
      );

      return response.statusCode == 200;
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc: $e');
      }
      return false;
    }
  }

  // L·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
  Future<int> getUnreadCount() async {
    try {
      final response = await _apiClient.get(
        '/notifications/unread-count',
        requireAuth: true,
      );

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        if (jsonResponse['success'] == true) {
          return jsonResponse['data'] ?? 0;
        } else {
          return 0;
        }
      } else {
        throw Exception(
          'L·ªói khi t·∫£i s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc: ${response.statusCode}',
        );
      }
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi l·∫•y s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc: $e');
      }
      return 0;
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o c·ª•c b·ªô
  Future<void> showLocalNotification(NotificationModel notification) async {
    try {
      if (kDebugMode) {
        print('ƒêang hi·ªÉn th·ªã th√¥ng b√°o: ${notification.title}');
      }

      // C·∫•u h√¨nh chi ti·∫øt cho Android
      const AndroidNotificationDetails androidPlatformChannelSpecifics =
          AndroidNotificationDetails(
            'sharexe_channel_id',
            'ShareXE Th√¥ng b√°o',
            channelDescription: 'K√™nh th√¥ng b√°o ·ª©ng d·ª•ng ShareXE',
            importance: Importance.max,
            priority: Priority.high,
            showWhen: true,
          );

      // C·∫•u h√¨nh chi ti·∫øt cho iOS
      const DarwinNotificationDetails iOSPlatformChannelSpecifics =
          DarwinNotificationDetails(
            presentAlert: true,
            presentBadge: true,
            presentSound: true,
            categoryIdentifier: 'sharexe_notifications',
          );

      const NotificationDetails platformChannelSpecifics = NotificationDetails(
        android: androidPlatformChannelSpecifics,
        iOS: iOSPlatformChannelSpecifics,
      );

      // ƒê·∫£m b·∫£o notification ID l√† duy nh·∫•t
      final uniqueId = DateTime.now().millisecondsSinceEpoch.remainder(100000);

      // Hi·ªÉn th·ªã th√¥ng b√°o
      await _flutterLocalNotificationsPlugin.show(
        uniqueId,
        notification.title,
        notification.content,
        platformChannelSpecifics,
        payload: json.encode({
          'type': notification.type,
          'referenceId': notification.referenceId,
        }),
      );

      if (kDebugMode) {
        print('ƒê√£ hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng');
      }
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi hi·ªÉn th·ªã th√¥ng b√°o c·ª•c b·ªô: $e');
      }
    }
  }

  // L·∫•y th√¥ng b√°o t·ª´ ch·ªëi t√†i x·∫ø
  Future<List<NotificationModel>> getDriverRejectionNotifications() async {
    try {
      final allNotifications = await getNotifications();
      // L·ªçc c√°c th√¥ng b√°o c√≥ type l√† DRIVER_REJECTED
      return allNotifications
          .where((notification) => notification.type == AppConfig.NOTIFICATION_DRIVER_REJECTED)
          .toList();
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi l·∫•y th√¥ng b√°o t·ª´ ch·ªëi t√†i x·∫ø: $e');
      }
      return [];
    }
  }

  // Ki·ªÉm tra c√≥ th√¥ng b√°o t·ª´ ch·ªëi t√†i x·∫ø hay kh√¥ng
  Future<bool> hasDriverRejectionNotifications() async {
    final rejections = await getDriverRejectionNotifications();
    return rejections.isNotEmpty;
  }

  // X·ª≠ l√Ω hi·ªÉn th·ªã th√¥ng b√°o t·ª´ ch·ªëi t√†i x·∫ø
  Future<void> handleDriverRejection(BuildContext context) async {
    try {
      final rejections = await getDriverRejectionNotifications();
      if (rejections.isNotEmpty) {
        // L·∫•y th√¥ng b√°o t·ª´ ch·ªëi m·ªõi nh·∫•t
        final latestRejection = rejections.first;

        // Hi·ªÉn th·ªã th√¥ng b√°o t·ª´ ch·ªëi
        if (!latestRejection.read) {
          // ƒê√°nh d·∫•u l√† ƒë√£ ƒë·ªçc
          await markAsRead(latestRejection.id);

          // Hi·ªÉn th·ªã popup
          if (context.mounted) {
            showDialog(
              context: context,
              builder: (BuildContext context) {
                return AlertDialog(
                  title: Row(
                    children: [
                      Icon(Icons.gpp_bad, color: Colors.red[700]),
                      const SizedBox(width: 8),
                      Text(
                        'H·ªì s∆° t√†i x·∫ø b·ªã t·ª´ ch·ªëi',
                        style: TextStyle(color: Colors.red[700]),
                      ),
                    ],
                  ),
                  content: SingleChildScrollView(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(
                          latestRejection.content.split('L√Ω do:').first.trim(),
                        ),
                        const SizedBox(height: 16),
                        Container(
                          width: double.infinity,
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: Colors.red[50],
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: Colors.red[200]!),
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Text(
                                'L√Ω do t·ª´ ch·ªëi:',
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: 14,
                                  color: Colors.red,
                                ),
                              ),
                              const SizedBox(height: 4),
                              Text(
                                extractRejectionReason(
                                      latestRejection.content,
                                    ) ??
                                    'Kh√¥ng c√≥ l√Ω do ƒë∆∞·ª£c cung c·∫•p',
                                style: TextStyle(
                                  fontSize: 14,
                                  color: Colors.red[900],
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                  actions: [
                    TextButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      child: const Text('ƒê√≥ng'),
                    ),
                    ElevatedButton.icon(
                      icon: const Icon(Icons.edit),
                      label: const Text('C·∫≠p nh·∫≠t h·ªì s∆°'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red[700],
                        foregroundColor: Colors.white,
                      ),
                      onPressed: () {
                        Navigator.of(context).pop();
                        Navigator.pushNamed(context, '/driver/edit-profile');
                      },
                    ),
                  ],
                );
              },
            );
          }
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi x·ª≠ l√Ω th√¥ng b√°o t·ª´ ch·ªëi t√†i x·∫ø: $e');
      }
    }
  }

  // Tr√≠ch xu·∫•t l√Ω do t·ª´ ch·ªëi t·ª´ n·ªôi dung th√¥ng b√°o
  String? extractRejectionReason(String content) {
    // Tr√≠ch xu·∫•t l√Ω do t·ª´ ch·ªëi t·ª´ n·ªôi dung th√¥ng b√°o
    // Format: "N·ªôi dung th√¥ng b√°o. L√Ω do: L√Ω do t·ª´ ch·ªëi"
    if (content.contains('L√Ω do:')) {
      return content.split('L√Ω do:').last.trim();
    }
    return null;
  }

  // Kh·ªüi t·∫°o local notifications
  Future<void> _setupLocalNotifications() async {
    try {
      // C·∫•u h√¨nh cho Android
      const AndroidInitializationSettings initializationSettingsAndroid =
          AndroidInitializationSettings('@mipmap/ic_launcher');

      // C·∫•u h√¨nh cho iOS (phi√™n b·∫£n m·ªõi kh√¥ng c√≥ onDidReceiveLocalNotification)
      final DarwinInitializationSettings initializationSettingsIOS =
          DarwinInitializationSettings(
            requestAlertPermission: true,
            requestBadgePermission: true,
            requestSoundPermission: true,
            // H·ªó tr·ª£ th√¥ng b√°o tr√™n iOS khi app ƒëang ch·∫°y
            notificationCategories: [
              DarwinNotificationCategory(
                'chat_message',
                actions: [
                  DarwinNotificationAction.plain(
                    'REPLY',
                    'Tr·∫£ l·ªùi',
                    options: {DarwinNotificationActionOption.foreground},
                  ),
                ],
                options: {DarwinNotificationCategoryOption.allowAnnouncement},
              ),
            ],
          );

      final InitializationSettings initializationSettings =
          InitializationSettings(
            android: initializationSettingsAndroid,
            iOS: initializationSettingsIOS,
          );

      await _flutterLocalNotificationsPlugin.initialize(
        initializationSettings,
        onDidReceiveNotificationResponse: (NotificationResponse response) {
          // Handle notification tap here
          if (kDebugMode) {
            print('Notification tapped with payload: ${response.payload}');
          }
          _handleNotificationTap(response.payload);
        },
      );

      // Y√™u c·∫ßu quy·ªÅn hi·ªÉn th·ªã th√¥ng b√°o m·ªôt l·∫ßn n·ªØa
      await _flutterLocalNotificationsPlugin
          .resolvePlatformSpecificImplementation<
            IOSFlutterLocalNotificationsPlugin
          >()
          ?.requestPermissions(alert: true, badge: true, sound: true);

      if (kDebugMode) {
        print('H·ªá th·ªëng th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng');
      }
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi kh·ªüi t·∫°o h·ªá th·ªëng th√¥ng b√°o: $e');
      }
    }
  }

  // Ki·ªÉm tra th√¥ng b√°o t·ª´ ch·ªëi t√†i x·∫ø khi kh·ªüi ƒë·ªông app
  Future<void> checkDriverRejectionOnStartup(BuildContext context) async {
    try {
      // Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
      final isLoggedIn = await _authManager.isLoggedIn();
      if (isLoggedIn) {
        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† t√†i x·∫ø kh√¥ng (n·∫øu c√≥ API ƒë·ªÉ ki·ªÉm tra)
        final rejectionNotifications = await getDriverRejectionNotifications();

        // L·ªçc c√°c th√¥ng b√°o ch∆∞a ƒë·ªçc v√† m·ªõi nh·∫•t
        final unreadRejections =
            rejectionNotifications
                .where((notification) => !notification.read)
                .toList();

        if (unreadRejections.isNotEmpty) {
          // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
          unreadRejections.sort((a, b) => b.createdAt.compareTo(a.createdAt));

          // L·∫•y th√¥ng b√°o m·ªõi nh·∫•t ƒë·ªÉ hi·ªÉn th·ªã
          final latestRejection = unreadRejections.first;

          if (context.mounted) {
            // ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
            await markAsRead(latestRejection.id);

            // Hi·ªÉn th·ªã th√¥ng b√°o popup
            showDialog(
              context: context,
              builder: (BuildContext context) {
                return AlertDialog(
                  title: Row(
                    children: [
                      Icon(Icons.warning_amber_rounded, color: Colors.red[700]),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'H·ªì s∆° t√†i x·∫ø c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát',
                          style: TextStyle(
                            color: Colors.red[700],
                            fontSize: 16,
                          ),
                        ),
                      ),
                    ],
                  ),
                  content: SingleChildScrollView(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(
                          latestRejection.content.split('L√Ω do:').first.trim(),
                        ),
                        const SizedBox(height: 16),
                        Container(
                          width: double.infinity,
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: Colors.red[50],
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(color: Colors.red[200]!),
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Text(
                                'L√Ω do t·ª´ ch·ªëi:',
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: 14,
                                  color: Colors.red,
                                ),
                              ),
                              const SizedBox(height: 4),
                              Text(
                                extractRejectionReason(
                                      latestRejection.content,
                                    ) ??
                                    'Kh√¥ng c√≥ l√Ω do ƒë∆∞·ª£c cung c·∫•p',
                                style: TextStyle(
                                  fontSize: 14,
                                  color: Colors.red[900],
                                ),
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(height: 16),
                        const Text(
                          'Vui l√≤ng c·∫≠p nh·∫≠t l·∫°i h·ªì s∆° c·ªßa b·∫°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng t√≠nh nƒÉng t√†i x·∫ø.',
                          style: TextStyle(fontStyle: FontStyle.italic),
                        ),
                      ],
                    ),
                  ),
                  actions: [
                    TextButton(
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                      child: const Text('ƒê·ªÉ sau'),
                    ),
                    ElevatedButton.icon(
                      icon: const Icon(Icons.edit),
                      label: const Text('C·∫≠p nh·∫≠t ngay'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red[700],
                        foregroundColor: Colors.white,
                      ),
                      onPressed: () {
                        Navigator.of(context).pop();
                        Navigator.pushNamed(context, '/driver/edit-profile');
                      },
                    ),
                  ],
                );
              },
            );
          }
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi ki·ªÉm tra th√¥ng b√°o t·ª´ ch·ªëi t√†i x·∫ø khi kh·ªüi ƒë·ªông: $e');
      }
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o cho t·ª´ng lo·∫°i th√¥ng b√°o c·ª• th·ªÉ
  Future<void> showNotificationByType(NotificationModel notification) async {
    switch (notification.type) {
      case AppConfig.NOTIFICATION_BOOKING_REQUEST:
        await showBookingRequestNotification(notification);
        break;
      case AppConfig.NOTIFICATION_BOOKING_ACCEPTED:
        await showBookingAcceptedNotification(notification);
        break;
      case AppConfig.NOTIFICATION_BOOKING_REJECTED:
        await showBookingRejectedNotification(notification);
        break;
      case AppConfig.NOTIFICATION_BOOKING_CANCELLED:
        await showBookingCanceledNotification(notification);
        break;
      case AppConfig.NOTIFICATION_CHAT_MESSAGE:
        await showChatMessageNotification(notification);
        break;
      case AppConfig.NOTIFICATION_DRIVER_APPROVED:
        await showDriverApprovedNotification(notification);
        break;
      case AppConfig.NOTIFICATION_DRIVER_REJECTED:
        await showDriverRejectedNotification(notification);
        break;
      default:
        await showLocalNotification(notification);
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o c√≥ ng∆∞·ªùi ƒë·∫∑t chuy·∫øn (cho t√†i x·∫ø)
  Future<void> showBookingRequestNotification(
    NotificationModel notification,
  ) async {
    try {
      // T·∫°o action buttons cho th√¥ng b√°o (ch·ªâ h·ªó tr·ª£ tr√™n Android)
      const List<AndroidNotificationAction> actions = [
        AndroidNotificationAction('accept', 'Ch·∫•p nh·∫≠n'),
        AndroidNotificationAction('reject', 'T·ª´ ch·ªëi'),
      ];

      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
            'booking_request_channel',
            'Y√™u c·∫ßu ƒë·∫∑t chuy·∫øn',
            channelDescription: 'Th√¥ng b√°o khi c√≥ ng∆∞·ªùi ƒë·∫∑t chuy·∫øn',
            importance: Importance.max,
            priority: Priority.high,
            showWhen: true,
            actions: actions,
            color: Color(0xFF002D72),
          );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: DarwinNotificationDetails(categoryIdentifier: 'booking_request'),
      );

      final uniqueId = DateTime.now().millisecondsSinceEpoch.remainder(100000);

      await _flutterLocalNotificationsPlugin.show(
        uniqueId,
        'Y√™u c·∫ßu ƒë·∫∑t chuy·∫øn m·ªõi',
        notification.content,
        notificationDetails,
        payload: json.encode({
          'type': notification.type,
          'referenceId': notification.referenceId,
        }),
      );
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫∑t chuy·∫øn: $e');
      }
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o cho h√†nh kh√°ch khi t√†i x·∫ø ch·∫•p nh·∫≠n
  Future<void> showBookingAcceptedNotification(
    NotificationModel notification,
  ) async {
    try {
      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
            'booking_accepted_channel',
            'Chuy·∫øn ƒëi ƒë∆∞·ª£c ch·∫•p nh·∫≠n',
            channelDescription: 'Th√¥ng b√°o khi t√†i x·∫ø ch·∫•p nh·∫≠n chuy·∫øn ƒëi',
            importance: Importance.max,
            priority: Priority.high,
            showWhen: true,
            color: Color(0xFF4CAF50),
          );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: DarwinNotificationDetails(
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
          categoryIdentifier: 'booking_status',
        ),
      );

      final uniqueId = DateTime.now().millisecondsSinceEpoch.remainder(100000);

      await _flutterLocalNotificationsPlugin.show(
        uniqueId,
        '‚úÖ Chuy·∫øn ƒëi ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n',
        notification.content,
        notificationDetails,
        payload: json.encode({
          'type': notification.type,
          'referenceId': notification.referenceId,
        }),
      );
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi hi·ªÉn th·ªã th√¥ng b√°o ch·∫•p nh·∫≠n chuy·∫øn: $e');
      }
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o khi chuy·∫øn ƒëi b·ªã t·ª´ ch·ªëi
  Future<void> showBookingRejectedNotification(
    NotificationModel notification,
  ) async {
    try {
      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
            'booking_rejected_channel',
            'Chuy·∫øn ƒëi b·ªã t·ª´ ch·ªëi',
            channelDescription: 'Th√¥ng b√°o khi t√†i x·∫ø t·ª´ ch·ªëi chuy·∫øn ƒëi',
            importance: Importance.high,
            priority: Priority.high,
            showWhen: true,
            color: Color(0xFFF44336),
          );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: DarwinNotificationDetails(categoryIdentifier: 'booking_status'),
      );

      final uniqueId = DateTime.now().millisecondsSinceEpoch.remainder(100000);

      await _flutterLocalNotificationsPlugin.show(
        uniqueId,
        '‚ùå Chuy·∫øn ƒëi b·ªã t·ª´ ch·ªëi',
        notification.content,
        notificationDetails,
        payload: json.encode({
          'type': notification.type,
          'referenceId': notification.referenceId,
        }),
      );
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi hi·ªÉn th·ªã th√¥ng b√°o t·ª´ ch·ªëi chuy·∫øn: $e');
      }
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o khi h√†nh kh√°ch h·ªßy chuy·∫øn ƒëi
  Future<void> showBookingCanceledNotification(
    NotificationModel notification,
  ) async {
    try {
      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
            'booking_canceled_channel',
            'Chuy·∫øn ƒëi b·ªã h·ªßy',
            channelDescription: 'Th√¥ng b√°o khi h√†nh kh√°ch h·ªßy chuy·∫øn ƒëi',
            importance: Importance.high,
            priority: Priority.high,
            showWhen: true,
            color: Color(0xFFFF9800),
          );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: DarwinNotificationDetails(categoryIdentifier: 'booking_status'),
      );

      final uniqueId = DateTime.now().millisecondsSinceEpoch.remainder(100000);

      await _flutterLocalNotificationsPlugin.show(
        uniqueId,
        'üö´ Chuy·∫øn ƒëi ƒë√£ b·ªã h·ªßy',
        notification.content,
        notificationDetails,
        payload: json.encode({
          'type': notification.type,
          'referenceId': notification.referenceId,
        }),
      );
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi hi·ªÉn th·ªã th√¥ng b√°o h·ªßy chuy·∫øn: $e');
      }
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o tin nh·∫Øn m·ªõi
  Future<void> showChatMessageNotification(
    NotificationModel notification,
  ) async {
    try {
      // Th√™m action tr·∫£ l·ªùi nhanh (ch·ªâ h·ªó tr·ª£ tr√™n Android)
      const List<AndroidNotificationAction> actions = [
        AndroidNotificationAction('reply', 'Tr·∫£ l·ªùi'),
      ];

      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
            'chat_message_channel',
            'Tin nh·∫Øn m·ªõi',
            channelDescription: 'Th√¥ng b√°o khi c√≥ tin nh·∫Øn m·ªõi',
            importance: Importance.high,
            priority: Priority.high,
            showWhen: true,
            actions: actions,
          );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: DarwinNotificationDetails(categoryIdentifier: 'chat_message'),
      );

      final uniqueId = DateTime.now().millisecondsSinceEpoch.remainder(100000);

      await _flutterLocalNotificationsPlugin.show(
        uniqueId,
        notification.title,
        notification.content,
        notificationDetails,
        payload: json.encode({
          'type': notification.type,
          'referenceId': notification.referenceId,
        }),
      );
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi hi·ªÉn th·ªã th√¥ng b√°o tin nh·∫Øn m·ªõi: $e');
      }
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o khi h·ªì s∆° t√†i x·∫ø ƒë∆∞·ª£c ch·∫•p nh·∫≠n
  Future<void> showDriverApprovedNotification(
    NotificationModel notification,
  ) async {
    try {
      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
            'driver_approved_channel',
            'H·ªì s∆° t√†i x·∫ø ƒë∆∞·ª£c ch·∫•p nh·∫≠n',
            channelDescription: 'Th√¥ng b√°o khi h·ªì s∆° t√†i x·∫ø ƒë∆∞·ª£c ch·∫•p nh·∫≠n',
            importance: Importance.high,
            priority: Priority.high,
            showWhen: true,
            color: Color(0xFF4CAF50),
          );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: DarwinNotificationDetails(categoryIdentifier: 'driver_status'),
      );

      final uniqueId = DateTime.now().millisecondsSinceEpoch.remainder(100000);

      await _flutterLocalNotificationsPlugin.show(
        uniqueId,
        '‚úÖ H·ªì s∆° t√†i x·∫ø ƒë∆∞·ª£c ch·∫•p nh·∫≠n',
        'Ch√∫c m·ª´ng! B·∫°n ƒë√£ c√≥ th·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n c√°c chuy·∫øn ƒëi v·ªõi t∆∞ c√°ch t√†i x·∫ø.',
        notificationDetails,
        payload: json.encode({
          'type': notification.type,
          'referenceId': notification.referenceId,
        }),
      );
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi hi·ªÉn th·ªã th√¥ng b√°o ch·∫•p nh·∫≠n h·ªì s∆° t√†i x·∫ø: $e');
      }
    }
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o khi h·ªì s∆° t√†i x·∫ø b·ªã t·ª´ ch·ªëi
  Future<void> showDriverRejectedNotification(
    NotificationModel notification,
  ) async {
    try {
      const AndroidNotificationDetails androidDetails =
          AndroidNotificationDetails(
            'driver_rejected_channel',
            'H·ªì s∆° t√†i x·∫ø b·ªã t·ª´ ch·ªëi',
            channelDescription: 'Th√¥ng b√°o khi h·ªì s∆° t√†i x·∫ø b·ªã t·ª´ ch·ªëi',
            importance: Importance.high,
            priority: Priority.high,
            showWhen: true,
            color: Color(0xFFF44336),
          );

      const NotificationDetails notificationDetails = NotificationDetails(
        android: androidDetails,
        iOS: DarwinNotificationDetails(categoryIdentifier: 'driver_status'),
      );

      final uniqueId = DateTime.now().millisecondsSinceEpoch.remainder(100000);

      String rejectionReason =
          extractRejectionReason(notification.content) ??
          'Kh√¥ng c√≥ l√Ω do ƒë∆∞·ª£c cung c·∫•p';

      await _flutterLocalNotificationsPlugin.show(
        uniqueId,
        '‚ùå H·ªì s∆° t√†i x·∫ø b·ªã t·ª´ ch·ªëi',
        'H·ªì s∆° t√†i x·∫ø c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát. L√Ω do: $rejectionReason',
        notificationDetails,
        payload: json.encode({
          'type': notification.type,
          'referenceId': notification.referenceId,
        }),
      );
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi hi·ªÉn th·ªã th√¥ng b√°o t·ª´ ch·ªëi h·ªì s∆° t√†i x·∫ø: $e');
      }
    }
  }

  // Send notification to specific user or broadcast
  Future<bool> sendNotification(
    String title,
    String message,
    String type,
    Map<String, dynamic> data,
    {String? recipientEmail}
  ) async {
    try {
      if (kDebugMode) {
        print('Sending notification: $title, $message, $type');
        if (recipientEmail != null) {
          print('Recipient: $recipientEmail');
        }
      }
      
      // Option 1: Use API to send notification
      final token = await _authManager.getToken();
      if (token == null) return false;
      
      // Prepare request body
      final Map<String, dynamic> requestBody = {
        'title': title,
        'content': message,  // Backend uses 'content' for message body
        'type': type,
        'referenceId': data['bookingId'] ?? data['rideId'] ?? 0,  // Backend expects referenceId directly, not nested in data
      };
      
      // Add recipient if specified
      if (recipientEmail != null && recipientEmail.isNotEmpty) {
        requestBody['recipientEmail'] = recipientEmail;
      }
      
      // Use the correct API endpoint
      final response = await _apiClient.post(
        '/notifications/send',  // Make sure this matches your backend endpoint
        body: requestBody,
        requireAuth: true,
      );
      
      if (response.statusCode == 200) {
        if (kDebugMode) {
          print('Notification sent successfully via API');
        }
        return true;
      }
      
      // If API failed, try local notification
      final notification = NotificationModel(
        id: DateTime.now().millisecondsSinceEpoch,
        userEmail: 'system',
        title: title,
        content: message,
        type: type,
        referenceId: data['rideId'] ?? 0,
        read: false,
        createdAt: DateTime.now(),
      );
      
      // Show local notification
      await showLocalNotification(notification);
      
      // Broadcast to streams
      _broadcastNotification(notification);
      
      return true;
    } catch (e) {
      if (kDebugMode) {
        print('Error sending notification: $e');
      }
      return false;
    }
  }

  // G·ª≠i th√¥ng b√°o khi t√†i x·∫ø ƒë∆∞·ª£c duy·ªát
  Future<bool> sendDriverApprovalNotification(String driverEmail, String driverName) async {
    try {
      return await sendNotification(
        'H·ªì s∆° t√†i x·∫ø ƒë√£ ƒë∆∞·ª£c duy·ªát',
        'Ch√∫c m·ª´ng $driverName! B·∫°n ƒë√£ c√≥ th·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n c√°c chuy·∫øn ƒëi v·ªõi t∆∞ c√°ch t√†i x·∫ø.',
        AppConfig.NOTIFICATION_DRIVER_APPROVED,
        {
          'status': 'APPROVED',
        },
        recipientEmail: driverEmail
      );
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi g·ª≠i th√¥ng b√°o t√†i x·∫ø ƒë∆∞·ª£c duy·ªát: $e');
      }
      return false;
    }
  }

  // G·ª≠i th√¥ng b√°o khi t√†i x·∫ø b·ªã t·ª´ ch·ªëi
  Future<bool> sendDriverRejectionNotification(String driverEmail, String driverName, String reason) async {
    try {
      return await sendNotification(
        'H·ªì s∆° t√†i x·∫ø b·ªã t·ª´ ch·ªëi',
        'H·ªì s∆° t√†i x·∫ø c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát. L√Ω do: $reason',
        AppConfig.NOTIFICATION_DRIVER_REJECTED,
        {
          'status': 'REJECTED',
          'reason': reason,
        },
        recipientEmail: driverEmail
      );
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi g·ª≠i th√¥ng b√°o t√†i x·∫ø b·ªã t·ª´ ch·ªëi: $e');
      }
      return false;
    }
  }

  // G·ª≠i th√¥ng b√°o khi chuy·∫øn ƒëi b·ªã h·ªßy
  Future<bool> sendRideCancelledNotification(Ride ride, List<String> passengerEmails) async {
    try {
      bool allSuccess = true;
      
      // G·ª≠i th√¥ng b√°o ƒë·∫øn t·ª´ng h√†nh kh√°ch ƒë√£ ƒë·∫∑t ch·ªó
      for (String email in passengerEmails) {
        final success = await sendNotification(
          'Chuy·∫øn ƒëi ƒë√£ b·ªã h·ªßy',
          'Chuy·∫øn ƒëi ${ride.departure} ƒë·∫øn ${ride.destination} ƒë√£ b·ªã h·ªßy b·ªüi t√†i x·∫ø ${ride.driverName}.',
          AppConfig.NOTIFICATION_RIDE_CANCELLED,
          {
            'rideId': ride.id,
            'status': 'CANCELLED',
          },
          recipientEmail: email
        );
        
        if (!success) {
          allSuccess = false;
        }
      }
      
      return allSuccess;
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi g·ª≠i th√¥ng b√°o h·ªßy chuy·∫øn: $e');
      }
      return false;
    }
  }

  // G·ª≠i th√¥ng b√°o khi chuy·∫øn ƒëi b·∫Øt ƒë·∫ßu
  Future<bool> sendRideStartedNotification(Ride ride, List<String> passengerEmails) async {
    try {
      bool allSuccess = true;
      
      // G·ª≠i th√¥ng b√°o ƒë·∫øn t·ª´ng h√†nh kh√°ch ƒë√£ ƒë·∫∑t ch·ªó
      for (String email in passengerEmails) {
        final success = await sendNotification(
          'Chuy·∫øn ƒëi ƒë√£ b·∫Øt ƒë·∫ßu',
          'Chuy·∫øn ƒëi ${ride.departure} ƒë·∫øn ${ride.destination} ƒë√£ b·∫Øt ƒë·∫ßu.',
          AppConfig.NOTIFICATION_RIDE_STARTED,
          {
            'rideId': ride.id,
            'status': 'IN_PROGRESS',
          },
          recipientEmail: email
        );
        
        if (!success) {
          allSuccess = false;
        }
      }
      
      return allSuccess;
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi g·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu chuy·∫øn: $e');
      }
      return false;
    }
  }
  
  // G·ª≠i th√¥ng b√°o khi c√≥ booking m·ªõi
  Future<bool> sendBookingRequestNotification(int bookingId, int rideId, String passengerName, String driverEmail) async {
    try {
      return await sendNotification(
        'Y√™u c·∫ßu ƒë·∫∑t ch·ªó m·ªõi',
        'C√≥ y√™u c·∫ßu ƒë·∫∑t ch·ªó m·ªõi t·ª´ h√†nh kh√°ch $passengerName cho chuy·∫øn ƒëi #$rideId.',
        AppConfig.NOTIFICATION_BOOKING_REQUEST,
        {
          'bookingId': bookingId,
          'rideId': rideId,
        },
        recipientEmail: driverEmail
      );
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi g·ª≠i th√¥ng b√°o y√™u c·∫ßu ƒë·∫∑t ch·ªó: $e');
      }
      return false;
    }
  }
  
  // G·ª≠i th√¥ng b√°o khi booking b·ªã h·ªßy b·ªüi h√†nh kh√°ch
  Future<bool> sendBookingCancelledNotification(int bookingId, int rideId, String passengerName, String driverEmail) async {
    try {
      return await sendNotification(
        'Booking ƒë√£ b·ªã h·ªßy',
        'Booking #$bookingId cho chuy·∫øn ƒëi #$rideId ƒë√£ b·ªã h·ªßy b·ªüi h√†nh kh√°ch $passengerName.',
        AppConfig.NOTIFICATION_BOOKING_CANCELLED,
        {
          'bookingId': bookingId,
          'rideId': rideId,
        },
        recipientEmail: driverEmail
      );
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi g·ª≠i th√¥ng b√°o h·ªßy booking: $e');
      }
      return false;
    }
  }
}
