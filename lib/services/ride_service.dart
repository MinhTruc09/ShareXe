import 'dart:convert';
import 'dart:async';
import 'dart:io';      // Add this import for SocketException
import 'dart:developer' as developer;
import 'package:flutter/material.dart';
import '../models/ride.dart';
import '../models/booking.dart';
import '../utils/http_client.dart';
import '../services/auth_manager.dart';
import 'package:http/http.dart' as http;
import '../utils/app_config.dart';
import '../services/booking_service.dart';

class RideService {
  final ApiClient _apiClient;
  final AuthManager _authManager = AuthManager();
  final AppConfig _appConfig = AppConfig();
  final BookingService _bookingService = BookingService();

  RideService() : _apiClient = ApiClient();

  // Cached rides to improve performance
  List<Ride> _cachedAvailableRides = [];
  DateTime _lastCacheTime = DateTime(1970); // Set to epoch initially
  
  // Cached driver rides to improve performance
  List<Ride> _cachedDriverRides = [];
  DateTime _lastDriverCacheTime = DateTime(1970); // Set to epoch initially
  
  // Get available rides
  Future<List<Ride>> getAvailableRides() async {
    debugPrint('Fetching available rides from API...');
    
    // Always refresh data when this method is called - don't use cache
    // This ensures that when a booking is cancelled, the ride appears again
    
    // Check token validity quietly (don't log detailed token info)
    await _authManager.checkAndPrintTokenValidity(verbose: false);
    
    List<Ride> availableRides = [];

    try {
      // Step 1: Get all available rides
      final response = await _apiClient.get(
        '/ride/available',
        timeout: const Duration(seconds: 5),
      );
      
      if (response.statusCode == 200) {
        try {
          final responseData = json.decode(response.body);
          if (responseData['success'] == true && responseData['data'] != null) {
            final List<dynamic> ridesData = responseData['data'] as List;
            availableRides = ridesData.map((json) => Ride.fromJson(json)).toList();
            
            // Sort rides with newest (highest ID) first
            availableRides.sort((a, b) => b.id.compareTo(a.id));
            
            // Update the cache with new data
            _cachedAvailableRides = List.from(availableRides);
            _lastCacheTime = DateTime.now();
          }
        } catch (e) {
          debugPrint('Error parsing API response: $e');
          
          // N·∫øu parse kh√¥ng th√†nh c√¥ng, s·ª≠ d·ª•ng cache n·∫øu c√≥
          if (_cachedAvailableRides.isNotEmpty) {
            // Use stale cache if we have it rather than no data
            debugPrint('Using stale cached data as fallback');
            return _cachedAvailableRides;
          }
        }
      } else if (_cachedAvailableRides.isNotEmpty) {
        // Use stale cache if API returns error but we have cached data
        debugPrint('Using stale cached data due to API error');
        return _cachedAvailableRides;
      }
      
      // Step 2: Get user's bookings and filter out booked rides
      try {
        final userBookings = await _bookingService.getPassengerBookings();
        
        // Create a set of ride IDs that should be filtered out
        Set<int> bookedRideIds = {};
        
        // Log all bookings for debugging
        print('üîç T√¨m th·∫•y ${userBookings.length} bookings cho ng∆∞·ªùi d√πng hi·ªán t·∫°i');
        for (final booking in userBookings) {
          print('üìñ Booking #${booking.id} cho chuy·∫øn ƒëi #${booking.rideId} - tr·∫°ng th√°i: ${booking.status}');
        }
        
        // 1. Add ride IDs from API bookings (CH·ªàL·∫§Y BOOKING ƒêANG HO·∫†T ƒê·ªòNG)
        if (userBookings.isNotEmpty) {
          final apiBookedRideIds = userBookings
              .where((booking) => 
                // Ch·ªâ l·ªçc b·ªè c√°c booking c√≥ tr·∫°ng th√°i ƒëang ho·∫°t ƒë·ªông (PENDING, ACCEPTED, IN_PROGRESS)
                // Kh√¥ng l·ªçc b·ªè c√°c booking ƒë√£ b·ªã h·ªßy (CANCELLED) ho·∫∑c b·ªã t·ª´ ch·ªëi (REJECTED)
                booking.status.toUpperCase() == 'PENDING' || 
                booking.status.toUpperCase() == 'ACCEPTED' ||
                booking.status.toUpperCase() == 'APPROVED' ||
                booking.status.toUpperCase() == 'IN_PROGRESS')
              .map((booking) => booking.rideId)
              .toSet();
          
          print('üîç L·ªçc b·ªè ${apiBookedRideIds.length} chuy·∫øn ƒëi ƒë√£ ƒë·∫∑t: $apiBookedRideIds');
          bookedRideIds.addAll(apiBookedRideIds);
        }
        
        // 2. Add ride ID from most recent booking if it's active
        final lastCreatedBooking = _bookingService.getLastCreatedBooking();
        if (lastCreatedBooking != null) {
          // Ch·ªâ l·ªçc b·ªè n·∫øu tr·∫°ng th√°i booking l√† PENDING, ACCEPTED ho·∫∑c IN_PROGRESS
          // Ki·ªÉm tra r√µ r√†ng tr·∫°ng th√°i h·ªßy ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng l·ªçc b·ªè chuy·∫øn ƒë√£ h·ªßy
          final status = lastCreatedBooking.status.toUpperCase();
          final isActive = status == 'PENDING' || status == 'ACCEPTED' || 
                          status == 'APPROVED' || status == 'IN_PROGRESS';
                          
          if (isActive) {
            print('üì± Booking g·∫ßn ƒë√¢y nh·∫•t #${lastCreatedBooking.id} ƒëang ho·∫°t ƒë·ªông v·ªõi tr·∫°ng th√°i $status, l·ªçc b·ªè chuy·∫øn ƒëi ${lastCreatedBooking.rideId}');
            bookedRideIds.add(lastCreatedBooking.rideId);
          } else {
            print('üì± Booking g·∫ßn ƒë√¢y nh·∫•t #${lastCreatedBooking.id} c√≥ tr·∫°ng th√°i $status, kh√¥ng l·ªçc b·ªè chuy·∫øn ƒëi ${lastCreatedBooking.rideId}');
          }
        } else {
          print('üì± Kh√¥ng c√≥ booking g·∫ßn ƒë√¢y n√†o ƒë∆∞·ª£c l∆∞u trong b·ªô nh·ªõ c·ª•c b·ªô');
        }
        
        // Filter out booked rides if any
        if (bookedRideIds.isNotEmpty) {
          print('üîç Tr∆∞·ªõc khi l·ªçc c√≥ ${availableRides.length} chuy·∫øn ƒëi');
          
          final filteredRides = availableRides
              .where((ride) => !bookedRideIds.contains(ride.id))
              .toList();
          
          print('üîç Sau khi l·ªçc c√≤n ${filteredRides.length} chuy·∫øn ƒëi');
              
          availableRides = filteredRides;
          
          // Update the cache with filtered data
          _cachedAvailableRides = List.from(availableRides);
          _lastCacheTime = DateTime.now();
        } else {
          print('üîç Kh√¥ng c√≥ chuy·∫øn ƒëi n√†o c·∫ßn l·ªçc b·ªè');
        }
      } catch (e) {
        debugPrint('Error filtering booked rides: $e');
        
        // Try with the most recent booking as fallback
        try {
          final lastCreatedBooking = _bookingService.getLastCreatedBooking();
          if (lastCreatedBooking != null) {
            // Ch·ªâ l·ªçc b·ªè n·∫øu booking ƒëang active
            final status = lastCreatedBooking.status.toUpperCase();
            final isActive = status == 'PENDING' || status == 'ACCEPTED' || 
                           status == 'APPROVED' || status == 'IN_PROGRESS';
                           
            if (isActive) {
              final filteredRides = availableRides
                  .where((ride) => ride.id != lastCreatedBooking.rideId)
                  .toList();
                  
              availableRides = filteredRides;
              
              // Update the cache with filtered data
              _cachedAvailableRides = List.from(availableRides);
              _lastCacheTime = DateTime.now();
            }
          }
        } catch (e2) {
          debugPrint('Error checking local booking data: $e2');
        }
      }
      
      return availableRides;
      
    } catch (e) {
      debugPrint('Exception in getAvailableRides: $e');
      
      // Return cached data in case of error
      if (_cachedAvailableRides.isNotEmpty) {
        debugPrint('Using cached data due to exception');
        return _cachedAvailableRides;
      }
      
      return [];
    }
  }

  // Get all available rides for driver - KH√îNG l·ªçc b·ªè chuy·∫øn ƒë√£ ƒë·∫∑t
  Future<List<Ride>> getDriverAvailableRides() async {
    print('üîç Fetching rides created by the current driver...');
    
    // Check if we have cached data that's less than 30 seconds old
    final now = DateTime.now();
    if (_cachedDriverRides.isNotEmpty && 
        now.difference(_lastDriverCacheTime).inSeconds < 30) {
      print('üì¶ Using cached driver rides (${_cachedDriverRides.length} items) from ${now.difference(_lastDriverCacheTime).inSeconds}s ago');
      return _cachedDriverRides;
    }
    
    List<Ride> myRides = [];

    try {
      // L·∫•y danh s√°ch chuy·∫øn ƒëi c·ªßa t√†i x·∫ø hi·ªán t·∫°i v·ªõi timeout
      final response = await _apiClient.get('/driver/my-rides', requireAuth: true)
          .timeout(const Duration(seconds: 5), onTimeout: () {
        print('‚è±Ô∏è API request timed out after 5 seconds');
        throw TimeoutException('API request timed out after 5 seconds');
      });
      
      print('üì° Response status: ${response.statusCode}');
      
      if (response.headers['content-type'] != null) {
        print('üì° Content-Type: ${response.headers['content-type']}');
      }

      if (response.statusCode == 200) {
        try {
          final responseData = json.decode(response.body);
          print('üì° Response data preview: ${responseData.toString().substring(0, min(100, responseData.toString().length))}...');
          
          if (responseData['success'] == true && responseData['data'] != null) {
            if (responseData['data'] is List) {
              final List<dynamic> ridesData = responseData['data'] as List;
              myRides = ridesData.map((json) => Ride.fromJson(json)).toList();
              print('‚úÖ T√†i x·∫ø nh·∫≠n ƒë∆∞·ª£c ${myRides.length} chuy·∫øn ƒëi t·ª´ API');
              
              // S·∫Øp x·∫øp chuy·∫øn ƒëi theo th·ª© t·ª± m·ªõi nh·∫•t tr∆∞·ªõc
              myRides.sort((a, b) {
                try {
                  final DateTime dateTimeA = DateTime.parse(a.startTime);
                  final DateTime dateTimeB = DateTime.parse(b.startTime);
                  return dateTimeB.compareTo(dateTimeA); // S·∫Øp x·∫øp gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
                } catch (e) {
                  print('‚ùå L·ªói khi s·∫Øp x·∫øp: $e');
                  return 0; // Gi·ªØ nguy√™n th·ª© t·ª± n·∫øu c√≥ l·ªói
                }
              });
              
              // Update the cache
              _cachedDriverRides = List.from(myRides);
              _lastDriverCacheTime = now;
              
              print('‚úÖ ƒê√£ s·∫Øp x·∫øp ${myRides.length} chuy·∫øn ƒëi theo th·ª© t·ª± m·ªõi nh·∫•t');
              
              return myRides;
            } else {
              print('‚ö†Ô∏è Data kh√¥ng ph·∫£i l√† List: ${responseData['data'].runtimeType}');
            }
          } else {
            print('‚ùå API response format not as expected: ${responseData['message'] ?? "No error message"}');
          }
        } catch (e) {
          print('‚ùå Error parsing API response for driver: $e');
        }
      }
      
      // Th·ª≠ fallback n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu v·ªõi timeout
      if (myRides.isEmpty) {
        print('üîÑ Trying fallback endpoint /driver/my-rides');
        try {
          final fallbackResponse = await _apiClient.get('/driver/my-rides', requireAuth: true)
              .timeout(const Duration(seconds: 8), onTimeout: () {
            print('‚è±Ô∏è Fallback API request timed out after 8 seconds');
            throw TimeoutException('Fallback API request timed out after 8 seconds');
          });
          
          if (fallbackResponse.statusCode == 200) {
            final fallbackData = json.decode(fallbackResponse.body);
            
            if (fallbackData['success'] == true && fallbackData['data'] != null) {
              final List<dynamic> fallbackRidesData = fallbackData['data'] as List;
              myRides = fallbackRidesData.map((json) => Ride.fromJson(json)).toList();
              print('‚úÖ Fallback: T√†i x·∫ø nh·∫≠n ƒë∆∞·ª£c ${myRides.length} chuy·∫øn ƒëi t·ª´ API');
              
              // S·∫Øp x·∫øp chuy·∫øn ƒëi theo th·ª© t·ª± m·ªõi nh·∫•t tr∆∞·ªõc
              myRides.sort((a, b) {
                try {
                  final DateTime dateTimeA = DateTime.parse(a.startTime);
                  final DateTime dateTimeB = DateTime.parse(b.startTime);
                  return dateTimeB.compareTo(dateTimeA); // S·∫Øp x·∫øp gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
                } catch (e) {
                  print('‚ùå L·ªói khi s·∫Øp x·∫øp: $e');
                  return 0; // Gi·ªØ nguy√™n th·ª© t·ª± n·∫øu c√≥ l·ªói
                }
              });
              
              // Update the cache
              _cachedDriverRides = List.from(myRides);
              _lastDriverCacheTime = now;
              
              print('‚úÖ ƒê√£ s·∫Øp x·∫øp ${myRides.length} chuy·∫øn ƒëi theo th·ª© t·ª± m·ªõi nh·∫•t (fallback)');
              
              return myRides;
            }
          }
        } catch (e) {
          String errorMessage = e.toString();
          if (e is TimeoutException || errorMessage.contains('TimeoutException')) {
            print('‚è±Ô∏è Timeout error in fallback API call: $e');
          } else if (errorMessage.contains('SocketException') || 
                    errorMessage.contains('Network is unreachable')) {
            print('üîå Network error in fallback API call: $e');
          } else {
            print('‚ùå Error in fallback API call: $e');
          }
        }
      }
      
      // If API calls fail but we have cached data, use it
      if (myRides.isEmpty && _cachedDriverRides.isNotEmpty) {
        print('üì¶ Using stale cached driver rides as fallback');
        return _cachedDriverRides;
      }
      
      // If all else fails, return empty list instead of mock data
      if (myRides.isEmpty) {
        print('‚ö†Ô∏è No driver rides found and no cached data available');
        return [];
      }
      
      return myRides;
    } catch (e) {
      String errorMessage = e.toString();
      
      if (e is TimeoutException || errorMessage.contains('TimeoutException')) {
        print('‚è±Ô∏è Timeout error in getDriverRides: $e');
      } else if (errorMessage.contains('SocketException') || 
                errorMessage.contains('Network is unreachable')) {
        print('üîå Network is unreachable in getDriverRides: $e');
      } else {
        print('‚ùå Exception in getDriverRides: $e');
      }
      
      // Return cached data in case of error
      if (_cachedDriverRides.isNotEmpty) {
        print('üì¶ Using cached driver rides due to exception');
        return _cachedDriverRides;
      }
      
      return [];
    }
  }

  // Helper to get min value
  int min(int a, int b) => a < b ? a : b;

  // X√≥a cache ƒë·ªÉ force load l·∫°i danh s√°ch rides c√≥ s·∫µn
  void clearAvailableRidesCache() {
    print('üßπ X√≥a cache danh s√°ch chuy·∫øn ƒëi c√≥ s·∫µn');
    _cachedAvailableRides = [];
    _lastCacheTime = DateTime(1970); // Reset v·ªÅ epoch
  }

  // Get ride details
  Future<Ride?> getRideDetails(int rideId) async {
    try {
      print('üîç Fetching details for ride #$rideId...');
      
      // Check if we have the ride details cached in memory
      // This would be a good place to implement a caching system
      // For now, we can just log the request details
      
      // Add a timeout to prevent hanging requests
      final response = await _apiClient.get('/ride/$rideId')
          .timeout(const Duration(seconds: 5), onTimeout: () {
        print('‚è±Ô∏è Timeout while fetching ride details');
        throw TimeoutException('API request timed out after 5 seconds');
      });
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        
        if (data['success'] == true && data['data'] != null) {
          // Create the Ride object
          final ride = Ride.fromJson(data['data']);
          
          // Cache this ride for future use if needed
          // This would be a good place to implement a caching system
          
          return ride;
        } else {
          print('‚ùå API returned success=false or data=null for ride #$rideId');
          return null;
        }
      } else {
        print('‚ùå Failed to get ride details. Status code: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('‚ùå Exception when getting ride details: $e');
      return null;
    }
  }

  // Search rides by criteria
  Future<List<Ride>> searchRides({
    String? departure,
    String? destination,
    DateTime? startTime,
    int? passengerCount,
  }) async {
    try {
      // Build query parameters
      final Map<String, String> queryParams = {};
      if (departure != null && departure.isNotEmpty) {
        queryParams['departure'] = departure;
      }
      if (destination != null && destination.isNotEmpty) {
        queryParams['destination'] = destination;
      }
      if (startTime != null) {
        // Format the date to ISO date format (YYYY-MM-DD) nh∆∞ API y√™u c·∫ßu
        queryParams['startTime'] = startTime.toIso8601String().split('T')[0];
      }
      if (passengerCount != null) {
        queryParams['seats'] = passengerCount.toString();
      }

      // Convert query params to URL string
      final String queryString = queryParams.entries
          .map((e) => '${e.key}=${Uri.encodeComponent(e.value)}')
          .join('&');

      print('üîç Searching rides with query: $queryString');
      final response = await _apiClient.get('/ride/search?$queryString');

      if (response.statusCode == 200) {
        // Check if the response is HTML
        if (response.headers['content-type']?.contains('text/html') == true ||
            response.body.trim().startsWith('<!DOCTYPE') ||
            response.body.trim().startsWith('<html')) {
          print('‚ùå Received HTML instead of JSON for search');
          // Return empty list if API unavailable
          return [];
        }

        try {
          final Map<String, dynamic> responseData = json.decode(response.body);
          if (responseData['success'] == true && responseData['data'] != null) {
            List<Ride> rides = [];
            if (responseData['data'] is List) {
              final List<dynamic> rideData = responseData['data'];
              print('‚úÖ T√¨m th·∫•y ${rideData.length} chuy·∫øn ƒëi ph√π h·ª£p');
              rides = rideData.map((json) => Ride.fromJson(json)).toList();
            } else if (responseData['data'] is Map) {
              print('‚úÖ T√¨m th·∫•y 1 chuy·∫øn ƒëi ph√π h·ª£p');
              rides = [Ride.fromJson(responseData['data'])];
            }
            
            // Sort rides with newest (highest ID) first
            rides.sort((a, b) => b.id.compareTo(a.id));
            
            return rides;
          }
          print('‚ùå Search response format not as expected: $responseData');
          return [];
        } catch (e) {
          print('‚ùå Error parsing search response: $e');
          return [];
        }
      } else {
        print('‚ùå Search failed: ${response.statusCode}');
        return [];
      }
    } catch (e) {
      print('‚ùå Error searching rides: $e');
      return [];
    }
  }

  // Creates mock pending bookings for demo purposes
  List<Booking> _getMockPendingBookings() {
    return [
      Booking(
        id: 101,
        rideId: 1,
        passengerId: 201,
        seatsBooked: 2,
        passengerName: "Nguy·ªÖn VƒÉn A",
        status: "PENDING",
        createdAt:
            DateTime.now().subtract(const Duration(hours: 1)).toIso8601String(),
      ),
      Booking(
        id: 102,
        rideId: 1,
        passengerId: 202,
        seatsBooked: 1,
        passengerName: "Tr·∫ßn Th·ªã B",
        status: "PENDING",
        createdAt:
            DateTime.now()
                .subtract(const Duration(minutes: 30))
                .toIso8601String(),
      ),
    ];
  }

  // T·∫°o chuy·∫øn ƒëi m·ªõi (cho t√†i x·∫ø)
  Future<bool> createRide(Map<String, dynamic> rideData) async {
    try {
      print('üìù T·∫°o chuy·∫øn ƒëi m·ªõi v·ªõi d·ªØ li·ªáu: $rideData');
      
      // Check if URL needs to be switched to a working one
      await _appConfig.switchToWorkingUrl();
      
      // Attempt to create ride with timeout
      final response = await _apiClient.post(
        '/ride',
        body: rideData,
        requireAuth: true,
      ).timeout(const Duration(seconds: 10), onTimeout: () {
        print('‚è±Ô∏è Timeout khi t·∫°o chuy·∫øn ƒëi sau 10 gi√¢y');
        throw TimeoutException('Timeout khi t·∫°o chuy·∫øn ƒëi');
      });

      print('üì° Response status: ${response.statusCode}');
      print('üì° Response body: ${response.body}');

      if (response.statusCode == 201 || response.statusCode == 200) {
        print('‚úÖ T·∫°o chuy·∫øn ƒëi th√†nh c√¥ng');
        return true;
      } else {
        print('‚ùå L·ªói khi t·∫°o chuy·∫øn ƒëi: ${response.statusCode} - ${response.body}');
        
        // Try alternative endpoint
        return await _tryAlternativeCreateRide(rideData);
      }
    } catch (e) {
      String errorMessage = e.toString();
      
      if (e is TimeoutException || errorMessage.contains('TimeoutException')) {
        print('‚è±Ô∏è Timeout error trong createRide: $e');
      } else if (e is SocketException || 
                errorMessage.contains('SocketException') || 
                errorMessage.contains('Network is unreachable')) {
        print('üîå L·ªói k·∫øt n·ªëi m·∫°ng khi t·∫°o chuy·∫øn ƒëi: $e');
      } else {
        print('‚ùå Exception khi t·∫°o chuy·∫øn ƒëi: $e');
      }
      
      // Try alternative endpoint as fallback
      return await _tryAlternativeCreateRide(rideData);
    }
  }
  
  // Ph∆∞∆°ng th·ª©c thay th·∫ø ƒë·ªÉ t·∫°o chuy·∫øn ƒëi khi endpoint ch√≠nh kh√¥ng ho·∫°t ƒë·ªông
  Future<bool> _tryAlternativeCreateRide(Map<String, dynamic> rideData) async {
    print('üîÑ Th·ª≠ t·∫°o chuy·∫øn ƒëi v·ªõi endpoint thay th·∫ø...');
    
    try {
      // Switch to fallback URL if not already using it
      if (!_appConfig.isUsingFallback) {
        _appConfig.isUsingFallback = true;
        print('üì° ƒê√£ chuy·ªÉn sang URL d·ª± ph√≤ng: ${_appConfig.fallbackApiUrl}');
      }
      
      // Try the driver/create endpoint
      final altResponse = await _apiClient.post(
        '/driver/create-ride',
        body: rideData,
        requireAuth: true,
      ).timeout(const Duration(seconds: 10), onTimeout: () {
        print('‚è±Ô∏è Timeout v·ªõi endpoint thay th·∫ø sau 10 gi√¢y');
        throw TimeoutException('Timeout v·ªõi endpoint thay th·∫ø');
      });
      
      print('üì° Alt endpoint response: ${altResponse.statusCode}');
      
      if (altResponse.statusCode == 201 || altResponse.statusCode == 200) {
        print('‚úÖ T·∫°o chuy·∫øn ƒëi th√†nh c√¥ng v·ªõi endpoint thay th·∫ø');
        return true;
      } 
      
      // Direct API call as last resort
      print('üîÑ Th·ª≠ t·∫°o chuy·∫øn ƒëi tr·ª±c ti·∫øp qua API (kh√¥ng th√¥ng qua ApiClient)...');
      final token = await _authManager.getToken();
      
      if (token == null) {
        print('‚ùå Kh√¥ng th·ªÉ t·∫°o chuy·∫øn ƒëi: Token kh√¥ng c√≥ s·∫µn');
        return false;
      }
      
      final directUrl = Uri.parse('${_appConfig.fullApiUrl}/ride');
      print('üåê Direct URL: $directUrl');
      
      final directResponse = await http.post(
        directUrl,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode(rideData),
      ).timeout(const Duration(seconds: 10));
      
      if (directResponse.statusCode == 201 || directResponse.statusCode == 200) {
        print('‚úÖ T·∫°o chuy·∫øn ƒëi th√†nh c√¥ng v·ªõi direct API call');
        return true;
      }
      
      print('‚ùå T·∫•t c·∫£ c√°c ph∆∞∆°ng th·ª©c t·∫°o chuy·∫øn ƒëi ƒë·ªÅu th·∫•t b·∫°i');
      return false;
      
    } catch (e) {
      print('‚ùå Exception trong ph∆∞∆°ng th·ª©c thay th·∫ø: $e');
      return false;
    }
  }

  // C·∫≠p nh·∫≠t chuy·∫øn ƒëi (cho t√†i x·∫ø)
  Future<bool> updateRide(int rideId, Map<String, dynamic> rideData) async {
    try {
      print('üìù C·∫≠p nh·∫≠t chuy·∫øn ƒëi #$rideId v·ªõi d·ªØ li·ªáu: $rideData');

      // Th√™m timeout ƒë·ªÉ tr√°nh treo v√¥ h·∫°n
      final response = await _apiClient.put(
        '/ride/update/$rideId',
        body: rideData,
        requireAuth: true,
      ).timeout(
        const Duration(seconds: 10),
        onTimeout: () {
          print('‚åõ API update ride timeout sau 10 gi√¢y');
          throw TimeoutException('API timeout');
        },
      );

      print('üìù Response status: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        try {
          final responseData = json.decode(response.body);
          
          // Ki·ªÉm tra ƒë√°p ·ª©ng c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng
          if (responseData['success'] == true) {
            print('‚úÖ C·∫≠p nh·∫≠t chuy·∫øn ƒëi th√†nh c√¥ng');
            
            // X√≥a cache ƒë·ªÉ ƒë·∫£m b·∫£o l·∫ßn sau l·∫•y d·ªØ li·ªáu m·ªõi
            _cachedDriverRides = [];
            _lastDriverCacheTime = DateTime(1970);
            
            return true;
          } else {
            print('‚ùå API tr·∫£ v·ªÅ success=false: ${responseData['message'] ?? "Kh√¥ng c√≥ th√¥ng b√°o l·ªói"}');
            return false;
          }
        } catch (e) {
          print('‚ùå L·ªói khi ph√¢n t√≠ch ph·∫£n h·ªìi: $e');
          return false;
        }
      } else {
        print('‚ùå L·ªói khi c·∫≠p nh·∫≠t chuy·∫øn ƒëi: ${response.statusCode}');
        
        // Th·ª≠ hi·ªÉn th·ªã n·ªôi dung l·ªói t·ª´ ph·∫£n h·ªìi
        try {
          final errorData = json.decode(response.body);
          print('‚ùå Chi ti·∫øt l·ªói: ${errorData['message'] ?? "Kh√¥ng c√≥ th√¥ng b√°o l·ªói"}');
        } catch (e) {
          print('‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch chi ti·∫øt l·ªói: ${response.body}');
        }
        
        return false;
      }
    } catch (e) {
      // Ph√¢n lo·∫°i l·ªói ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o r√µ r√†ng h∆°n
      String errorMessage = e.toString();
      
      if (e is TimeoutException || errorMessage.contains('TimeoutException')) {
        print('‚è±Ô∏è Timeout error trong updateRide: $e');
      } else if (errorMessage.contains('SocketException') || 
                errorMessage.contains('Network is unreachable')) {
        print('üîå Network is unreachable trong updateRide: $e');
      } else {
        print('‚ùå Exception khi c·∫≠p nh·∫≠t chuy·∫øn ƒëi: $e');
      }
      
      return false;
    }
  }

  // H·ªßy chuy·∫øn ƒëi (cho t√†i x·∫ø)
  Future<bool> cancelRide(int rideId) async {
    try {
      print('üö´ B·∫Øt ƒë·∫ßu h·ªßy chuy·∫øn ƒëi #$rideId');

      // Debug hi·ªÉn th·ªã token ƒë∆∞·ª£c s·ª≠ d·ª•ng
      final token = await _authManager.getToken();
      if (token == null) {
        print('‚ùå Token r·ªóng - kh√¥ng th·ªÉ h·ªßy chuy·∫øn ƒëi');
        return false;
      }
      
      print('üîë Token h·ª£p l·ªá: ${token.length > 20 ? "C√≥ (${token.substring(0, 10)}...)" : "Kh√¥ng"}');
      
      // Th·ª≠ ph∆∞∆°ng th·ª©c PUT tr∆∞·ªõc v·ªõi timeout
      print('‚è±Ô∏è Th·ª≠ ph∆∞∆°ng th·ª©c PUT v·ªõi timeout 10 gi√¢y');
      try {
        final response = await _apiClient.put(
          '/ride/cancel/$rideId',
          requireAuth: true,
        ).timeout(
          const Duration(seconds: 10),
          onTimeout: () {
            print('‚åõ PUT API timeout sau 10 gi√¢y');
            throw TimeoutException('API timeout');
          },
        );

        print('üìù Response PUT status: ${response.statusCode}');
        print('üìù Response PUT body: ${response.body.substring(0, min(100, response.body.length))}...');

        if (response.statusCode == 200 || response.statusCode == 201) {
          print('‚úÖ H·ªßy chuy·∫øn ƒëi th√†nh c√¥ng qua PUT');
          // T√¨m ki·∫øm v√† hi·ªÉn th·ªã ride ƒë√£ b·ªã h·ªßy
          try {
            final updatedRide = await getRideDetails(rideId);
            if (updatedRide != null) {
              print('üöó Ride #$rideId: Status = ${updatedRide.status} (${updatedRide.status.toUpperCase()})');
            }
          } catch(e) {
            print('‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i c·ªßa chuy·∫øn ƒëi sau khi h·ªßy: $e');
          }
          return true;
        } else {
          print('‚ö†Ô∏è PUT request kh√¥ng th√†nh c√¥ng: ${response.statusCode} - ${response.body}');
        }
      } catch (e) {
        print('‚ö†Ô∏è L·ªói khi th·ª≠ PUT request: $e');
      }
      
      // Th·ª≠ ph∆∞∆°ng th·ª©c POST v·ªõi timeout
      print('‚è±Ô∏è Th·ª≠ ph∆∞∆°ng th·ª©c POST v·ªõi timeout 10 gi√¢y');
      try {
        final response = await _apiClient.post(
          '/ride/cancel/$rideId',
          requireAuth: true,
        ).timeout(
          const Duration(seconds: 10),
          onTimeout: () {
            print('‚åõ POST API timeout sau 10 gi√¢y');
            throw TimeoutException('API timeout');
          },
        );
        
        print('üìù Response POST status: ${response.statusCode}');
        print('üìù Response POST body: ${response.body.substring(0, min(100, response.body.length))}...');
        
        if (response.statusCode == 200 || response.statusCode == 201) {
          print('‚úÖ H·ªßy chuy·∫øn ƒëi th√†nh c√¥ng qua POST');
          return true;
        } else {
          print('‚ö†Ô∏è POST request kh√¥ng th√†nh c√¥ng: ${response.statusCode} - ${response.body}');
        }
      } catch (e) {
        print('‚ö†Ô∏è L·ªói khi th·ª≠ POST request: $e');
      }
      
      // N·∫øu c·∫£ PUT v√† POST ƒë·ªÅu th·∫•t b·∫°i, th·ª≠ tr·ª±c ti·∫øp API v·ªõi timeout
      print('‚è±Ô∏è Th·ª≠ direct API call v·ªõi timeout 10 gi√¢y');
      try {
        final directUrl = '${_appConfig.apiBaseUrl}/ride/cancel/$rideId';
        print('üåê Direct API URL: $directUrl');
        
        final directResponse = await http.put(
          Uri.parse(directUrl),
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': 'Bearer $token',
          },
        ).timeout(
          const Duration(seconds: 10),
          onTimeout: () {
            print('‚åõ Direct API timeout sau 10 gi√¢y');
            throw TimeoutException('Direct API timeout');
          },
        );
        
        print('üìù Direct API status: ${directResponse.statusCode}');
        print('üìù Direct API headers: ${directResponse.headers}');
        print('üìù Direct API body: ${directResponse.body.substring(0, min(100, directResponse.body.length))}...');
        
        if (directResponse.statusCode == 200 || directResponse.statusCode == 201) {
          print('‚úÖ H·ªßy chuy·∫øn ƒëi th√†nh c√¥ng qua direct API call');
          return true;
        } else {
          print('‚ö†Ô∏è Direct API kh√¥ng th√†nh c√¥ng: ${directResponse.statusCode} - ${directResponse.body}');
        }
      } catch (e) {
        print('‚ö†Ô∏è L·ªói khi th·ª≠ direct API call: $e');
      }

      print('‚ùå T·∫•t c·∫£ c√°c ph∆∞∆°ng th·ª©c ƒë·ªÅu th·∫•t b·∫°i! Chuy·∫øn ƒëi #$rideId kh√¥ng th·ªÉ h·ªßy');
      return false;
    } catch (e) {
      print('‚ùå Exception ch√≠nh trong cancelRide: $e');
      return false;
    }
  }

  // L·∫•y c√°c chuy·∫øn ƒëi t√†i x·∫ø ƒë√£ t·∫°o
  Future<List<Ride>> getDriverRides() async {
    print('üîç Fetching rides created by the current driver...');
    
    // Check if we have cached data that's less than 30 seconds old
    final now = DateTime.now();
    if (_cachedDriverRides.isNotEmpty && 
        now.difference(_lastDriverCacheTime).inSeconds < 30) {
      print('üì¶ Using cached driver rides (${_cachedDriverRides.length} items) from ${now.difference(_lastDriverCacheTime).inSeconds}s ago');
      return _cachedDriverRides;
    }
    
    List<Ride> myRides = [];

    try {
      // L·∫•y danh s√°ch chuy·∫øn ƒëi c·ªßa t√†i x·∫ø hi·ªán t·∫°i v·ªõi timeout
      print('üåê URL endpoint: ${_appConfig.fullApiUrl}/driver/my-rides');
      final response = await _apiClient.get('/driver/my-rides', requireAuth: true)
          .timeout(const Duration(seconds: 10), onTimeout: () {
        print('‚è±Ô∏è API request timed out after 10 seconds');
        throw TimeoutException('API request timed out after 10 seconds');
      });
      
      print('üì° Response status: ${response.statusCode}');
      
      if (response.headers['content-type'] != null) {
        print('üì° Content-Type: ${response.headers['content-type']}');
      }

      if (response.statusCode == 200) {
        try {
          final responseData = json.decode(response.body);
          print('üì° Response data preview: ${responseData.toString().substring(0, min(100, responseData.toString().length))}...');
          
          if (responseData['success'] == true && responseData['data'] != null) {
            if (responseData['data'] is List) {
              final List<dynamic> ridesData = responseData['data'] as List;
              myRides = ridesData.map((json) => Ride.fromJson(json)).toList();
              print('‚úÖ T√†i x·∫ø nh·∫≠n ƒë∆∞·ª£c ${myRides.length} chuy·∫øn ƒëi t·ª´ API');
              
              // S·∫Øp x·∫øp chuy·∫øn ƒëi theo th·ª© t·ª± m·ªõi nh·∫•t tr∆∞·ªõc
              myRides.sort((a, b) {
                try {
                  final DateTime dateTimeA = DateTime.parse(a.startTime);
                  final DateTime dateTimeB = DateTime.parse(b.startTime);
                  return dateTimeB.compareTo(dateTimeA); // S·∫Øp x·∫øp gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
                } catch (e) {
                  print('‚ùå L·ªói khi s·∫Øp x·∫øp: $e');
                  return 0; // Gi·ªØ nguy√™n th·ª© t·ª± n·∫øu c√≥ l·ªói
                }
              });
              
              // Update the cache
              _cachedDriverRides = List.from(myRides);
              _lastDriverCacheTime = now;
              
              print('‚úÖ ƒê√£ s·∫Øp x·∫øp ${myRides.length} chuy·∫øn ƒëi theo th·ª© t·ª± m·ªõi nh·∫•t');
              
              return myRides;
            } else {
              print('‚ö†Ô∏è Data kh√¥ng ph·∫£i l√† List: ${responseData['data'].runtimeType}');
            }
          } else {
            print('‚ùå API response format not as expected: ${responseData['message'] ?? "No error message"}');
          }
        } catch (e) {
          print('‚ùå Error parsing API response for driver: $e');
        }
      }
      
      // Th·ª≠ fallback n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu v·ªõi timeout
      if (myRides.isEmpty) {
        print('üîÑ Trying fallback endpoint /driver/my-rides');
        try {
          final fallbackResponse = await _apiClient.get('/driver/my-rides', requireAuth: true)
              .timeout(const Duration(seconds: 8), onTimeout: () {
            print('‚è±Ô∏è Fallback API request timed out after 8 seconds');
            throw TimeoutException('Fallback API request timed out after 8 seconds');
          });
          
          if (fallbackResponse.statusCode == 200) {
            final fallbackData = json.decode(fallbackResponse.body);
            
            if (fallbackData['success'] == true && fallbackData['data'] != null) {
              final List<dynamic> fallbackRidesData = fallbackData['data'] as List;
              myRides = fallbackRidesData.map((json) => Ride.fromJson(json)).toList();
              print('‚úÖ Fallback: T√†i x·∫ø nh·∫≠n ƒë∆∞·ª£c ${myRides.length} chuy·∫øn ƒëi t·ª´ API');
              
              // S·∫Øp x·∫øp chuy·∫øn ƒëi theo th·ª© t·ª± m·ªõi nh·∫•t tr∆∞·ªõc
              myRides.sort((a, b) {
                try {
                  final DateTime dateTimeA = DateTime.parse(a.startTime);
                  final DateTime dateTimeB = DateTime.parse(b.startTime);
                  return dateTimeB.compareTo(dateTimeA); // S·∫Øp x·∫øp gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
                } catch (e) {
                  print('‚ùå L·ªói khi s·∫Øp x·∫øp: $e');
                  return 0; // Gi·ªØ nguy√™n th·ª© t·ª± n·∫øu c√≥ l·ªói
                }
              });
              
              // Update the cache
              _cachedDriverRides = List.from(myRides);
              _lastDriverCacheTime = now;
              
              print('‚úÖ ƒê√£ s·∫Øp x·∫øp ${myRides.length} chuy·∫øn ƒëi theo th·ª© t·ª± m·ªõi nh·∫•t (fallback)');
              
              return myRides;
            }
          }
        } catch (e) {
          String errorMessage = e.toString();
          if (e is TimeoutException || errorMessage.contains('TimeoutException')) {
            print('‚è±Ô∏è Timeout error in fallback API call: $e');
          } else if (errorMessage.contains('SocketException') || 
                    errorMessage.contains('Network is unreachable')) {
            print('üîå Network error in fallback API call: $e');
          } else {
            print('‚ùå Error in fallback API call: $e');
          }
        }
      }
      
      // If API calls fail but we have cached data, use it
      if (myRides.isEmpty && _cachedDriverRides.isNotEmpty) {
        print('üì¶ Using stale cached driver rides as fallback');
        return _cachedDriverRides;
      }
      
      // If all else fails, return empty list instead of mock data
      if (myRides.isEmpty) {
        print('‚ö†Ô∏è No driver rides found and no cached data available');
        return [];
      }
      
      return myRides;
    } catch (e) {
      String errorMessage = e.toString();
      
      if (e is TimeoutException || errorMessage.contains('TimeoutException')) {
        print('‚è±Ô∏è Timeout error in getDriverRides: $e');
      } else if (errorMessage.contains('SocketException') || 
                errorMessage.contains('Network is unreachable')) {
        print('üîå Network is unreachable in getDriverRides: $e');
      } else {
        print('‚ùå Exception in getDriverRides: $e');
      }
      
      // Return cached data in case of error
      if (_cachedDriverRides.isNotEmpty) {
        print('üì¶ Using cached driver rides due to exception');
        return _cachedDriverRides;
      }
      
      return [];
    }
  }
  
  // Ho√†n th√†nh chuy·∫øn ƒëi (cho t√†i x·∫ø)
  Future<bool> completeRide(int rideId) async {
    try {
      print('‚úÖ ƒê√°nh d·∫•u chuy·∫øn ƒëi #$rideId l√† ƒë√£ ho√†n th√†nh');

      final response = await _apiClient.put(
        '/ride/complete/$rideId',
        requireAuth: true,
      );

      if (response.statusCode == 200) {
        print('‚úÖ Ho√†n th√†nh chuy·∫øn ƒëi th√†nh c√¥ng');
        return true;
      } else {
        print('‚ùå L·ªói khi ho√†n th√†nh chuy·∫øn ƒëi: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi ho√†n th√†nh chuy·∫øn ƒëi: $e');
      return false;
    }
  }

  // Ki·ªÉm tra xem chuy·∫øn ƒëi c√≥ ƒëang di·ªÖn ra kh√¥ng (ƒë√£ ƒë·∫øn gi·ªù kh·ªüi h√†nh)
  bool isRideInProgress(Ride ride) {
    try {
      final startTime = DateTime.parse(ride.startTime);
      final now = DateTime.now();
      
      // T√≠nh th·ªùi gian ch√™nh l·ªách
      final difference = startTime.difference(now);
      
      // Chuy·∫øn ƒëi ƒëang di·ªÖn ra n·∫øu:
      // 1. Tr·∫°ng th√°i l√† ACTIVE
      // 2. ƒê√£ ƒë·∫øn th·ªùi ƒëi·ªÉm kh·ªüi h√†nh ho·∫∑c s·∫Øp ƒë·∫øn (c√≤n d∆∞·ªõi 30 ph√∫t)
      // 3. Ch∆∞a qu√° 2 gi·ªù sau th·ªùi ƒëi·ªÉm kh·ªüi h√†nh (ƒë·ªÉ c√≥ th·ªÉ x√°c nh·∫≠n ho√†n th√†nh)
      
      return difference.inMinutes <= 30 && 
             difference.inHours > -2 && 
             ride.status.toUpperCase() == 'ACTIVE';
    } catch (e) {
      print('‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i chuy·∫øn ƒëi: $e');
      return false;
    }
  }
  
  // Ki·ªÉm tra n·∫øu chuy·∫øn ƒëi ƒë√£ ƒë·∫øn th·ªùi gian xu·∫•t ph√°t (c√≥ th·ªÉ x√°c nh·∫≠n)
  bool canConfirmRide(Ride ride) {
    try {
      final startTime = DateTime.parse(ride.startTime);
      final now = DateTime.now();
      
      // Chuy·∫øn ƒëi c√≥ th·ªÉ x√°c nh·∫≠n n·∫øu:
      // 1. Tr·∫°ng th√°i l√† ACTIVE
      // 2. ƒê√£ ƒë·∫øn ho·∫∑c g·∫ßn ƒë·∫øn th·ªùi ƒëi·ªÉm kh·ªüi h√†nh (c√≤n d∆∞·ªõi 30 ph√∫t)
      
      final bool isTimeToConfirm = startTime.isBefore(now) || 
                                 startTime.difference(now).inMinutes <= 30;
                                 
      return isTimeToConfirm && ride.status.toUpperCase() == 'ACTIVE';
    } catch (e) {
      print('‚ùå L·ªói khi ki·ªÉm tra c√≥ th·ªÉ x√°c nh·∫≠n chuy·∫øn ƒëi: $e');
      return false;
    }
  }
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i theo d√µi chuy·∫øn ƒëi
  Future<bool> updateRideTrackingStatus(int rideId, String status) async {
    try {
      print('üìù C·∫≠p nh·∫≠t tr·∫°ng th√°i theo d√µi chuy·∫øn ƒëi #$rideId th√†nh $status');
      
      // L∆∞u tr·ªØ tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa ride n·∫øu c√≥ th·ªÉ
      Ride? currentRide;
      try {
        currentRide = await getRideDetails(rideId);
        if (currentRide != null) {
          print('üì¶ ƒê√£ l∆∞u tr·ªØ th√¥ng tin ride hi·ªán t·∫°i ƒë·ªÉ d·ª± ph√≤ng: ${currentRide.status}');
        }
      } catch (e) {
        print('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ride hi·ªán t·∫°i: $e');
      }

      final rideData = {
        'status': status
      };

      // Th·ª≠ c·∫≠p nh·∫≠t v·ªõi endpoint ch√≠nh
      try {
        final response = await _apiClient.put(
          '/ride/update-status/$rideId',
          body: rideData,
          requireAuth: true,
        ).timeout(const Duration(seconds: 5), onTimeout: () {
          print('‚è±Ô∏è Timeout while updating ride status');
          throw TimeoutException('API request timed out after 5 seconds');
        });

        if (response.statusCode == 200) {
          print('‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i theo d√µi th√†nh c√¥ng');
          return true;
        } else {
          print('‚ö†Ô∏è L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i theo d√µi: ${response.statusCode}');
          try {
            print('‚ö†Ô∏è Body: ${response.body}');
          } catch (_) {}
        }
      } catch (e) {
        print('‚ö†Ô∏è L·ªói khi g·ªçi API c·∫≠p nh·∫≠t tr·∫°ng th√°i: $e');
      }
      
      // Th·ª≠ v·ªõi endpoint d·ª± ph√≤ng
      try {
        print('üîÑ Th·ª≠ v·ªõi endpoint d·ª± ph√≤ng...');
        final altResponse = await _apiClient.put(
          '/api/ride/update-status/$rideId',
          body: rideData,
          requireAuth: true,
        ).timeout(const Duration(seconds: 5), onTimeout: () {
          print('‚è±Ô∏è Timeout while updating ride status with backup endpoint');
          throw TimeoutException('API request timed out after 5 seconds');
        });
        
        if (altResponse.statusCode == 200) {
          print('‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng v·ªõi endpoint d·ª± ph√≤ng');
          return true;
        }
      } catch (e) {
        print('‚ö†Ô∏è L·ªói v·ªõi endpoint d·ª± ph√≤ng: $e');
      }
      
      // N·∫øu c·∫£ hai ƒë·ªÅu th·∫•t b·∫°i, l∆∞u tr·∫°ng th√°i v√†o b·ªô nh·ªõ c·ª•c b·ªô ƒë·ªÉ ƒë·ªìng b·ªô sau
      if (currentRide != null) {
        try {
          print('üì¶ L∆∞u thay ƒë·ªïi tr·∫°ng th√°i ride v√†o b·ªô nh·ªõ c·ª•c b·ªô ƒë·ªÉ ƒë·ªìng b·ªô sau');
          // Th·ª±c hi·ªán l∆∞u v√†o b·ªô nh·ªõ c·ª•c b·ªô t·∫°i ƒë√¢y n·∫øu c·∫ßn
          
          // Tr·∫£ v·ªÅ true ƒë·ªÉ UI v·∫´n hi·ªÉn th·ªã nh∆∞ ƒë√£ th√†nh c√¥ng
          // (v√¨ d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c ƒë·ªìng b·ªô sau)
          return true;
        } catch (e) {
          print('‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u tr·∫°ng th√°i ride v√†o b·ªô nh·ªõ c·ª•c b·ªô: $e');
        }
      }
      
      print('‚ùå T·∫•t c·∫£ c√°c ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªÅu th·∫•t b·∫°i');
      return false;
    } catch (e) {
      print('‚ùå Exception khi c·∫≠p nh·∫≠t tr·∫°ng th√°i theo d√µi: $e');
      return false;
    }
  }
  
  // ƒê√°nh d·∫•u chuy·∫øn ƒëi ƒëang di·ªÖn ra (ƒë√£ ƒë·∫øn gi·ªù xu·∫•t ph√°t)
  Future<bool> markRideInProgress(int rideId) async {
    return updateRideTrackingStatus(rideId, 'IN_PROGRESS');
  }
  
  // T√†i x·∫ø x√°c nh·∫≠n kh·ªüi h√†nh
  Future<bool> driverConfirmDeparture(int rideId) async {
    try {
      print('üöò T√†i x·∫ø x√°c nh·∫≠n kh·ªüi h√†nh chuy·∫øn ƒëi #$rideId');

      final response = await _apiClient.put(
        '/driver/confirm-departure/$rideId',
        requireAuth: true,
      );

      if (response.statusCode == 200) {
        print('‚úÖ T√†i x·∫ø x√°c nh·∫≠n kh·ªüi h√†nh th√†nh c√¥ng');
        return true;
      } else {
        print('‚ùå L·ªói khi t√†i x·∫ø x√°c nh·∫≠n kh·ªüi h√†nh: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi t√†i x·∫ø x√°c nh·∫≠n kh·ªüi h√†nh: $e');
      return false;
    }
  }
  
  // H√†nh kh√°ch x√°c nh·∫≠n tham gia chuy·∫øn ƒëi
  Future<bool> passengerConfirmDeparture(int rideId) async {
    try {
      print('üöò H√†nh kh√°ch x√°c nh·∫≠n tham gia chuy·∫øn ƒëi #$rideId');

      final response = await _apiClient.put(
        '/passenger/confirm-departure/$rideId',
        requireAuth: true,
      );

      if (response.statusCode == 200) {
        print('‚úÖ H√†nh kh√°ch x√°c nh·∫≠n tham gia th√†nh c√¥ng');
        return true;
      } else {
        print('‚ùå L·ªói khi h√†nh kh√°ch x√°c nh·∫≠n tham gia: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi h√†nh kh√°ch x√°c nh·∫≠n tham gia: $e');
      return false;
    }
  }

  // H√†nh kh√°ch x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi
  Future<bool> passengerConfirmCompletion(int rideId) async {
    try {
      print('üöò H√†nh kh√°ch x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi #$rideId');

      final response = await _apiClient.put(
        '/passenger/passenger-confirm/$rideId',
        requireAuth: true,
      );

      if (response.statusCode == 200) {
        print('‚úÖ H√†nh kh√°ch x√°c nh·∫≠n ho√†n th√†nh th√†nh c√¥ng');
        return true;
      } else {
        print('‚ùå L·ªói khi h√†nh kh√°ch x√°c nh·∫≠n ho√†n th√†nh: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi h√†nh kh√°ch x√°c nh·∫≠n ho√†n th√†nh: $e');
      return false;
    }
  }

  // T√†i x·∫ø x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi
  Future<bool> driverCompleteRide(int rideId) async {
    try {
      print('‚úÖ T√†i x·∫ø ho√†n th√†nh chuy·∫øn ƒëi #$rideId');
      print('üîÑ API Endpoint: ${_appConfig.fullApiUrl}/driver/complete/$rideId');

      final token = await _authManager.getToken();
      print('üîë Token: ${token != null ? "H·ª£p l·ªá (${token.substring(0, min(10, token.length))}...)" : "Kh√¥ng c√≥ token"}');

      final response = await _apiClient.put(
        '/driver/complete/$rideId',
        requireAuth: true,
      );

      print('üì° Response status: ${response.statusCode}');
      print('üì° Response headers: ${response.headers}');
      if (response.body.isNotEmpty) {
        try {
          final jsonResponse = json.decode(response.body);
          print('üì° Response body: $jsonResponse');
          
          // In th√¥ng tin chi ti·∫øt v·ªÅ k·∫øt qu·∫£
          if (jsonResponse['success'] == true) {
            print('‚úÖ API tr·∫£ v·ªÅ th√†nh c√¥ng, data: ${jsonResponse['data']}');
          } else {
            print('‚ö†Ô∏è API tr·∫£ v·ªÅ l·ªói: ${jsonResponse['message']}');
          }
        } catch (e) {
          print('‚ö†Ô∏è Kh√¥ng th·ªÉ parse response body: ${response.body}');
        }
      } else {
        print('‚ö†Ô∏è Response body r·ªóng');
      }

      if (response.statusCode == 200) {
        print('‚úÖ T√†i x·∫ø ho√†n th√†nh chuy·∫øn ƒëi th√†nh c√¥ng');
        
        // X√≥a cache ƒë·ªÉ reload m·ªõi nh·∫•t
        _cachedDriverRides = [];
        _lastDriverCacheTime = DateTime(1970);
        
        return true;
      } else {
        print('‚ùå L·ªói khi t√†i x·∫ø ho√†n th√†nh chuy·∫øn ƒëi: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Exception khi t√†i x·∫ø ho√†n th√†nh chuy·∫øn ƒëi: $e');
      return false;
    }
  }

  // T√†i x·∫ø x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi
  Future<bool> confirmRideCompletion(int rideId) async {
    developer.log('üîÑ ƒêang x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi #$rideId...', name: 'ride_service');
    
    try {
      // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i chuy·∫øn ƒëi
      final response = await _apiClient.put(
        '/ride/$rideId/confirm-completion',
        requireAuth: true,
      ).timeout(const Duration(seconds: 10), onTimeout: () {
        throw TimeoutException('Y√™u c·∫ßu ƒë√£ h·∫øt th·ªùi gian ch·ªù');
      });

      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        
        if (responseData['success'] == true) {
          developer.log('‚úÖ X√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi #$rideId th√†nh c√¥ng', name: 'ride_service');
          
          // X√≥a b·ªô nh·ªõ cache ƒë·ªÉ l·∫ßn t·∫£i ti·∫øp theo s·∫Ω l·∫•y d·ªØ li·ªáu m·ªõi
          _cachedDriverRides = [];
          _lastDriverCacheTime = DateTime(1970);
          
          return true;
        } else {
          developer.log('‚ùå Kh√¥ng th·ªÉ x√°c nh·∫≠n ho√†n th√†nh: ${responseData['message']}', name: 'ride_service');
          return false;
        }
      } else {
        developer.log('‚ùå API tr·∫£ v·ªÅ l·ªói: ${response.statusCode}', name: 'ride_service');
        return false;
      }
    } catch (e) {
      developer.log('‚ùå L·ªói khi x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi: $e', name: 'ride_service', error: e);
      return false;
    }
  }
  
  // H·ªßy booking chuy·∫øn ƒëi (cho h√†nh kh√°ch)
  Future<bool> cancelPassengerBooking(int rideId) async {
    developer.log('üîÑ ƒêang h·ªßy booking chuy·∫øn ƒëi #$rideId...', name: 'ride_service');
    print('üö´ ƒêang h·ªßy booking cho chuy·∫øn ƒëi #$rideId...');
    
    try {
      // L·∫•y token ƒë·ªÉ ki·ªÉm tra
      final token = await _authManager.getToken();
      if (token == null) {
        print('‚ùå Token r·ªóng - kh√¥ng th·ªÉ h·ªßy booking');
        return false;
      }
      
      // Th·ª≠ v·ªõi endpoint ch√≠nh
      try {
        final response = await _apiClient.delete(
          '/passenger/bookings/$rideId',
          requireAuth: true,
        ).timeout(const Duration(seconds: 10), onTimeout: () {
          throw TimeoutException('Y√™u c·∫ßu ƒë√£ h·∫øt th·ªùi gian ch·ªù');
        });

        print('üì° Cancel booking response: ${response.statusCode}');
        print('üì° Response body: ${response.body}');
        
        if (response.statusCode == 200) {
          try {
            final responseData = json.decode(response.body);
            
            if (responseData['success'] == true) {
              developer.log('‚úÖ H·ªßy booking chuy·∫øn ƒëi #$rideId th√†nh c√¥ng', name: 'ride_service');
              print('‚úÖ ƒê√£ h·ªßy booking th√†nh c√¥ng');
              
              // X√≥a cache ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi nh·∫•t
              _cachedAvailableRides = [];
              _lastCacheTime = DateTime(1970);
              
              return true;
            } else {
              developer.log('‚ùå API tr·∫£ v·ªÅ success=false: ${responseData['message'] ?? "Kh√¥ng c√≥ th√¥ng b√°o l·ªói"}', name: 'ride_service');
              print('‚ùå API tr·∫£ v·ªÅ success=false: ${responseData['message'] ?? "Kh√¥ng c√≥ th√¥ng b√°o l·ªói"}');
              return false;
            }
          } catch (e) {
            print('‚ùå L·ªói khi ph√¢n t√≠ch ph·∫£n h·ªìi: $e');
            return false;
          }
        } else {
          print('‚ùå Error Response (${response.statusCode}): ${response.body}');
          
          // N·∫øu 403 Forbidden, th√¨ c√≥ th·ªÉ ng∆∞·ªùi d√πng kh√¥ng ƒë·ªß quy·ªÅn ho·∫∑c kh√¥ng ph·∫£i l√† ng∆∞·ªùi ƒë·∫∑t chuy·∫øn ƒëi n√†y
          if (response.statusCode == 403) {
            developer.log('‚ùå Kh√¥ng c√≥ quy·ªÅn h·ªßy booking (403 Forbidden)', name: 'ride_service');
            print('‚ùå Kh√¥ng c√≥ quy·ªÅn h·ªßy booking ho·∫∑c kh√¥ng ph·∫£i ng∆∞·ªùi ƒë·∫∑t chuy·∫øn n√†y');
            return false;
          }
        }
      } catch (e) {
        print('‚ùå L·ªói v·ªõi endpoint ch√≠nh: $e');
      }
      
      // Th·ª≠ v·ªõi endpoint th·ª© hai n·∫øu endpoint ƒë·∫ßu ti√™n kh√¥ng th√†nh c√¥ng
      try {
        print('üîÑ Th·ª≠ v·ªõi endpoint thay th·∫ø...');
        final altResponse = await _apiClient.delete(
          '/passenger/cancel-booking/$rideId',
          requireAuth: true,
        ).timeout(const Duration(seconds: 10));
        
        print('üì° Alt endpoint response: ${altResponse.statusCode}');
        
        if (altResponse.statusCode == 200) {
          developer.log('‚úÖ H·ªßy booking th√†nh c√¥ng qua endpoint thay th·∫ø', name: 'ride_service');
          print('‚úÖ ƒê√£ h·ªßy booking th√†nh c√¥ng (endpoint thay th·∫ø)');
          return true;
        }
      } catch (e) {
        print('‚ùå L·ªói v·ªõi endpoint thay th·∫ø: $e');
      }

      // Th·ª≠ l·∫ßn cu·ªëi v·ªõi endpoint th·ª© ba
      try {
        print('üîÑ Th·ª≠ v·ªõi endpoint th·ª© ba...');
        final finalResponse = await _apiClient.put(
          '/passenger/bookings/cancel/$rideId',
          requireAuth: true,
        ).timeout(const Duration(seconds: 10));
        
        print('üì° Final endpoint response: ${finalResponse.statusCode}');
        
        if (finalResponse.statusCode == 200) {
          developer.log('‚úÖ H·ªßy booking th√†nh c√¥ng qua endpoint cu·ªëi c√πng', name: 'ride_service');
          print('‚úÖ ƒê√£ h·ªßy booking th√†nh c√¥ng (endpoint cu·ªëi c√πng)');
          return true;
        } else {
          print('‚ùå Error Response: ${finalResponse.body}');
          print('üì° API response code: ${finalResponse.statusCode}');
          print('üì° Response body: ${finalResponse.body}');
        }
      } catch (e) {
        print('‚ùå L·ªói v·ªõi endpoint cu·ªëi c√πng: $e');
      }
      
      // N·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i, tr·∫£ v·ªÅ false
      developer.log('‚ùå Kh√¥ng th·ªÉ h·ªßy booking sau khi th·ª≠ t·∫•t c·∫£ c√°c ph∆∞∆°ng th·ª©c', name: 'ride_service');
      return false;
    } catch (e) {
      String errorMessage = e.toString();
      
      if (e is TimeoutException || errorMessage.contains('TimeoutException')) {
        print('‚è±Ô∏è Timeout error khi h·ªßy booking: $e');
      } else if (errorMessage.contains('SocketException') || 
                errorMessage.contains('Network is unreachable')) {
        print('üîå Network is unreachable khi h·ªßy booking: $e');
      } else {
        print('‚ùå Exception khi h·ªßy booking: $e');
      }
      
      developer.log('‚ùå L·ªói khi h·ªßy booking chuy·∫øn ƒëi: $e', name: 'ride_service', error: e);
      return false;
    }
  }
}
