import 'dart:convert';
import 'package:flutter/foundation.dart';
import '../models/chat_message_model.dart';
import 'auth_manager.dart';
import 'websocket_service.dart';
import '../utils/app_config.dart';
import '../utils/http_client.dart';

class ChatService {
  static final ChatService _instance = ChatService._internal();
  factory ChatService() => _instance;
  ChatService._internal();

  final WebSocketService _webSocketService = WebSocketService();
  final AuthManager _authManager = AuthManager();
  final AppConfig _appConfig = AppConfig();
  final ApiClient _apiClient = ApiClient();

  Future<void> initialize(String baseUrl) async {
    if (baseUrl.isNotEmpty) {
      _appConfig.updateBaseUrl(baseUrl);
    }
  }

  // L·∫•y danh s√°ch c√°c cu·ªôc tr√≤ chuy·ªán
  Future<List<Map<String, dynamic>>> getChatRooms() async {
    try {
      final response = await _apiClient.get('/chat/rooms', requireAuth: true);

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        if (jsonResponse['success'] == true && jsonResponse['data'] != null) {
          return List<Map<String, dynamic>>.from(jsonResponse['data']);
        } else {
          return [];
        }
      } else {
        throw Exception(
          'L·ªói khi t·∫£i danh s√°ch ph√≤ng chat: ${response.statusCode}',
        );
      }
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi l·∫•y danh s√°ch ph√≤ng chat: $e');
      }
      return [];
    }
  }

  // L·∫•y l·ªãch s·ª≠ tin nh·∫Øn c·ªßa m·ªôt ph√≤ng chat
  Future<List<ChatMessageModel>> getChatHistory(String roomId) async {
    try {
      if (kDebugMode) {
        print('üîÑ ƒêang t·∫£i l·ªãch s·ª≠ chat cho ph√≤ng: $roomId');
        print('üîÑ API Endpoint: ${_appConfig.fullApiUrl}/chat/history/$roomId');
      }
      
      // Ki·ªÉm tra xem roomId c√≥ h·ª£p l·ªá kh√¥ng
      if (roomId.isEmpty || roomId == 'null' || roomId == 'undefined') {
        if (kDebugMode) {
          print('‚ùå RoomId kh√¥ng h·ª£p l·ªá: $roomId');
        }
        return [];
      }
      
      final response = await _apiClient.get(
        '/chat/history/$roomId',
        requireAuth: true,
      );

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        if (kDebugMode) {
          print('‚úÖ Nh·∫≠n ph·∫£n h·ªìi t·ª´ API: ${response.statusCode}');
          print('‚úÖ D·ªØ li·ªáu: ${jsonResponse['success']}, c√≥ ${jsonResponse['data']?.length ?? 0} tin nh·∫Øn');
        }
        
        if (jsonResponse['success'] == true && jsonResponse['data'] != null) {
          final List<dynamic> data = jsonResponse['data'];
          final messages = data.map((item) => ChatMessageModel.fromJson(item)).toList();
          
          if (kDebugMode) {
            print('‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi ${messages.length} tin nh·∫Øn t·ª´ JSON');
          }
          
          return messages;
        } else {
          if (kDebugMode) {
            print('‚ö†Ô∏è API tr·∫£ v·ªÅ success=false ho·∫∑c data=null: ${jsonResponse['message']}');
          }
          return [];
        }
      } else {
        if (kDebugMode) {
          print('‚ùå L·ªói HTTP ${response.statusCode}: ${response.body}');
        }
        throw Exception('L·ªói khi t·∫£i l·ªãch s·ª≠ chat: ${response.statusCode}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ chat: $e');
        print('‚ùå Stack trace: ${StackTrace.current}');
      }
      return [];
    }
  }

  // T·∫°o ph√≤ng chat m·ªõi ho·∫∑c l·∫•y ph√≤ng chat hi·ªán t·∫°i v·ªõi m·ªôt ng∆∞·ªùi d√πng
  Future<String?> createOrGetChatRoom(String receiverEmail) async {
    try {
      final response = await _apiClient.get(
        '/chat/room/${Uri.encodeComponent(receiverEmail)}',
        requireAuth: true,
      );

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        if (jsonResponse['success'] == true && jsonResponse['data'] != null) {
          return jsonResponse['data'];
        } else {
          if (kDebugMode) {
            print('Kh√¥ng th·ªÉ l·∫•y roomId: ${jsonResponse['message']}');
          }
          return null;
        }
      } else {
        throw Exception('L·ªói khi t·∫°o ph√≤ng chat: ${response.statusCode}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi t·∫°o ph√≤ng chat: $e');
      }
      return null;
    }
  }

  // G·ª≠i tin nh·∫Øn chat
  Future<bool> sendMessage(
    String roomId,
    String receiverEmail,
    String content,
  ) async {
    // Ensure we have valid parameters
    if (roomId.isEmpty || receiverEmail.isEmpty || content.isEmpty) {
      if (kDebugMode) {
        print('‚ùå Invalid parameters for sending message');
        print('roomId: $roomId, receiverEmail: $receiverEmail, content length: ${content.length}');
      }
      return false;
    }
    
    // First check if WebSocket is connected
    final bool wsConnected = _webSocketService.isConnected();
    
    if (!wsConnected) {
      if (kDebugMode) {
        print('‚ÑπÔ∏è WebSocket not connected, using REST API fallback');
      }
      return _sendMessageViaRest(roomId, receiverEmail, content);
    }

    try {
      if (kDebugMode) {
        print('üì§ Sending message via WebSocket to room: $roomId');
      }
      
      _webSocketService.sendChatMessage(roomId, receiverEmail, content);
      
      // Still send via REST API as a backup to ensure delivery
      // This helps in case the WebSocket message gets lost
      bool restSent = await _sendMessageViaRest(roomId, receiverEmail, content);
      
      if (kDebugMode && !restSent) {
        print('‚ö†Ô∏è WebSocket message sent but REST API backup failed');
      }
      
      return true;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error sending message via WebSocket: $e');
        print('‚ö†Ô∏è Falling back to REST API');
      }
      // Fallback to REST API if WebSocket fails
      return _sendMessageViaRest(roomId, receiverEmail, content);
    }
  }

  // G·ª≠i tin nh·∫Øn qua REST API (fallback khi WebSocket kh√¥ng ho·∫°t ƒë·ªông)
  Future<bool> _sendMessageViaRest(
    String roomId,
    String receiverEmail,
    String content,
  ) async {
    try {
      if (kDebugMode) {
        print('üì§ Sending message via REST API to room: $roomId');
        print('üì§ API Endpoint: ${_appConfig.fullApiUrl}/chat/send');
      }
      
      final response = await _apiClient.post(
        '/chat/send',
        body: {
          'roomId': roomId,
          'receiverEmail': receiverEmail,
          'content': content,
        },
        requireAuth: true,
      );

      final bool success = response.statusCode == 200;
      
      if (kDebugMode) {
        if (success) {
          print('‚úÖ Message sent successfully via REST API');
        } else {
          print('‚ùå REST API message failed with status: ${response.statusCode}');
          print('‚ùå Response: ${response.body}');
        }
      }
      
      return success;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error sending message via REST API: $e');
        print('‚ùå Stack trace: ${StackTrace.current}');
      }
      return false;
    }
  }

  // ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
  Future<bool> markMessagesAsRead(String roomId) async {
    try {
      final response = await _apiClient.put(
        '/chat/read/$roomId',
        requireAuth: true,
      );

      return response.statusCode == 200;
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi ƒë√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc: $e');
      }
      return false;
    }
  }

  // L·∫•y s·ªë l∆∞·ª£ng tin nh·∫Øn ch∆∞a ƒë·ªçc
  Future<int> getUnreadMessageCount() async {
    try {
      final response = await _apiClient.get(
        '/chat/unread-count',
        requireAuth: true,
      );

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        if (jsonResponse['success'] == true) {
          return jsonResponse['data'] ?? 0;
        } else {
          return 0;
        }
      } else {
        throw Exception(
          'L·ªói khi t·∫£i s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc: ${response.statusCode}',
        );
      }
    } catch (e) {
      if (kDebugMode) {
        print('L·ªói khi l·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc: $e');
      }
      return 0;
    }
  }
}
