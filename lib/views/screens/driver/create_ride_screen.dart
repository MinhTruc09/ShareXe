import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../../../services/ride_service.dart';
import '../../../services/auth_manager.dart';
import '../../../services/profile_service.dart';
import '../../../models/user_profile.dart';
import '../../widgets/location_picker.dart';
import '../../widgets/date_picker.dart';
import '../../widgets/passenger_counter.dart';
import '../../widgets/sharexe_background2.dart';

class CreateRideScreen extends StatefulWidget {
  final Map<String, dynamic>?
  existingRide; // null n·∫øu t·∫°o m·ªõi, c√≥ gi√° tr·ªã n·∫øu c·∫≠p nh·∫≠t

  const CreateRideScreen({Key? key, this.existingRide}) : super(key: key);

  @override
  State<CreateRideScreen> createState() => _CreateRideScreenState();
}

class _CreateRideScreenState extends State<CreateRideScreen> {
  final RideService _rideService = RideService();
  final AuthManager _authManager = AuthManager();
  final ProfileService _profileService = ProfileService();
  final _formKey = GlobalKey<FormState>();

  String _departure = '';
  String _destination = '';
  DateTime? _departureDate;
  int _totalSeats = 4;
  double _pricePerSeat = 0;
  bool _isSubmitting = false;
  bool _isEditMode = false;
  bool _isLoading = true;
  bool _isDriverApproved = false;
  String? _driverStatus;
  int? _rideId;

  final TextEditingController _priceController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _checkDriverStatus();

    // N·∫øu c√≥ existingRide th√¨ ƒë√¢y l√† ch·∫ø ƒë·ªô c·∫≠p nh·∫≠t
    if (widget.existingRide != null) {
      _isEditMode = true;
      _loadExistingRideData();
      
      // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa chuy·∫øn ƒëi
      if (widget.existingRide?['status']?.toString().toUpperCase() == 'CANCELLED') {
        // S·ª≠ d·ª•ng WidgetsBinding ƒë·ªÉ ƒë·∫£m b·∫£o dialog ƒë∆∞·ª£c hi·ªÉn th·ªã sau khi build ho√†n t·∫•t
        WidgetsBinding.instance.addPostFrameCallback((_) {
          showDialog(
            context: context,
            barrierDismissible: false,
            builder: (BuildContext context) {
              return AlertDialog(
                title: const Text('Chuy·∫øn ƒëi ƒë√£ b·ªã h·ªßy'),
                content: const Text(
                  'Kh√¥ng th·ªÉ ch·ªânh s·ª≠a chuy·∫øn ƒëi ƒë√£ b·ªã h·ªßy. Vui l√≤ng t·∫°o chuy·∫øn ƒëi m·ªõi.',
                ),
                actions: [
                  TextButton(
                    onPressed: () {
                      Navigator.of(context).pop(); // ƒê√≥ng dialog
                      Navigator.of(context).pop(); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc
                    },
                    child: const Text('ƒê√£ hi·ªÉu'),
                  ),
                ],
              );
            },
          );
        });
      }
    }
  }

  Future<void> _checkDriverStatus() async {
    try {
      setState(() {
        _isLoading = true;
      });
      
      final response = await _profileService.getUserProfile();
      
      setState(() {
        _isLoading = false;
        
        if (response.success && response.data != null) {
          final UserProfile userProfile = response.data!;
          _driverStatus = userProfile.status;
          _isDriverApproved = userProfile.status == 'APPROVED';
          
          // N·∫øu kh√¥ng ph·∫£i l√† ch·∫ø ƒë·ªô ch·ªânh s·ª≠a chuy·∫øn v√† t√†i x·∫ø ch∆∞a ƒë∆∞·ª£c duy·ªát,
          // hi·ªÉn th·ªã th√¥ng b√°o
          if (!_isEditMode && !_isDriverApproved) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              _showDriverNotApprovedDialog();
            });
          }
        } else {
          // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin h·ªì s∆°, gi·∫£ ƒë·ªãnh t√†i x·∫ø ch∆∞a ƒë∆∞·ª£c duy·ªát
          _isDriverApproved = false;
          _driverStatus = 'UNKNOWN';
          
          if (!_isEditMode) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              _showDriverNotApprovedDialog();
            });
          }
        }
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
        _isDriverApproved = false;
        _driverStatus = 'ERROR';
      });
      
      if (!_isEditMode) {
        WidgetsBinding.instance.addPostFrameCallback((_) {
          _showDriverNotApprovedDialog();
        });
      }
    }
  }
  
  void _showDriverNotApprovedDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Row(
            children: [
              Icon(
                _driverStatus == 'PENDING'
                    ? Icons.hourglass_top
                    : Icons.error_outline,
                color:
                    _driverStatus == 'PENDING'
                        ? Colors.orange
                        : Colors.red,
              ),
              const SizedBox(width: 8),
              Text(
                _driverStatus == 'PENDING'
                    ? 'ƒêang ch·ªù ph√™ duy·ªát'
                    : 'Ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát',
                style: TextStyle(
                  color:
                      _driverStatus == 'PENDING'
                          ? Colors.orange[700]
                          : Colors.red[700],
                ),
              ),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                _driverStatus == 'PENDING'
                    ? 'T√†i kho·∫£n t√†i x·∫ø c·ªßa b·∫°n ƒëang trong qu√° tr√¨nh x√©t duy·ªát. Vui l√≤ng ƒë·ª£i ph√™ duy·ªát tr∆∞·ªõc khi t·∫°o chuy·∫øn ƒëi.'
                    : 'T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c duy·ªát. Vui l√≤ng ki·ªÉm tra th√¥ng b√°o v√† c·∫≠p nh·∫≠t h·ªì s∆° tr∆∞·ªõc khi t·∫°o chuy·∫øn ƒëi.',
                style: const TextStyle(fontSize: 14),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // ƒê√≥ng dialog
                Navigator.of(context).pop(); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc
              },
              child: const Text('ƒê√£ hi·ªÉu'),
            ),
          ],
        );
      },
    );
  }

  @override
  void dispose() {
    _priceController.dispose();
    super.dispose();
  }

  void _loadExistingRideData() {
    final ride = widget.existingRide!;

    _rideId = ride['id'];
    _departure = ride['departure'] ?? '';
    _destination = ride['destination'] ?? '';

    if (ride['startTime'] != null) {
      try {
        _departureDate = DateTime.parse(ride['startTime']);
      } catch (e) {
        print('Error parsing date: $e');
      }
    }

    _totalSeats = ride['totalSeat'] ?? 4;
    _pricePerSeat = (ride['pricePerSeat'] ?? 0).toDouble();
    _priceController.text = _pricePerSeat.toString();
  }

  Future<void> _submitRide() async {
    // Ki·ªÉm tra tr·∫°ng th√°i t√†i x·∫ø tr∆∞·ªõc khi t·∫°o chuy·∫øn m·ªõi
    if (!_isEditMode && !_isDriverApproved) {
      _showDriverNotApprovedDialog();
      return;
    }
    
    if (_formKey.currentState?.validate() != true) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin')),
      );
      return;
    }

    if (_departure.isEmpty || _destination.isEmpty || _departureDate == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin chuy·∫øn ƒëi'),
        ),
      );
      return;
    }
    
    // Ki·ªÉm tra tr·∫°ng th√°i c·ªßa chuy·∫øn ƒëi n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
    if (_isEditMode && widget.existingRide != null) {
      final rideStatus = widget.existingRide?['status']?.toString().toUpperCase();
      if (rideStatus == 'CANCELLED') {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t chuy·∫øn ƒëi ƒë√£ b·ªã h·ªßy'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }
    }

    setState(() {
      _isSubmitting = true;
    });

    try {
      // Ki·ªÉm tra ng√†y gi·ªù xu·∫•t ph√°t
      final now = DateTime.now();
      if (_departureDate!.isBefore(now)) {
        setState(() {
          _isSubmitting = false;
        });
        
        // Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu th·ªùi gian ƒë√£ qua
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Th·ªùi gian xu·∫•t ph√°t kh√¥ng th·ªÉ trong qu√° kh·ª©'),
            backgroundColor: Colors.orange,
          ),
        );
        return;
      }
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu chuy·∫øn ƒëi
      final rideData = {
        'departure': _departure,
        'destination': _destination,
        'startTime': _departureDate!.toIso8601String(),
        'totalSeat': _totalSeats,
        'pricePerSeat': _pricePerSeat,
        'status': 'ACTIVE',
      };

      print('üìù ƒêang g·ª≠i d·ªØ li·ªáu chuy·∫øn ƒëi: $rideData');
      
      // Hi·ªÉn th·ªã dialog ƒë·ªÉ ng∆∞·ªùi d√πng bi·∫øt ƒëang x·ª≠ l√Ω
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (BuildContext context) {
          return Dialog(
            child: Container(
              padding: EdgeInsets.all(20),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 20),
                  Text('ƒêang x·ª≠ l√Ω, vui l√≤ng ƒë·ª£i...',
                    style: TextStyle(fontSize: 16),
                  ),
                ],
              ),
            ),
          );
        },
      );

      bool success;

      if (_isEditMode && _rideId != null) {
        // C·∫≠p nh·∫≠t chuy·∫øn ƒëi
        success = await _rideService.updateRide(_rideId!, rideData);
      } else {
        // T·∫°o chuy·∫øn ƒëi m·ªõi
        success = await _rideService.createRide(rideData);
      }

      // ƒê√≥ng dialog x·ª≠ l√Ω
      Navigator.of(context).pop();

      setState(() {
        _isSubmitting = false;
      });

      if (success) {
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: Text(_isEditMode ? 'C·∫≠p nh·∫≠t th√†nh c√¥ng' : 'T·∫°o chuy·∫øn ƒëi th√†nh c√¥ng'),
              content: Text(_isEditMode 
                  ? 'Th√¥ng tin chuy·∫øn ƒëi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.'
                  : 'Chuy·∫øn ƒëi m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v√† ƒë√£ c√≥ trong danh s√°ch chuy·∫øn ƒëi c·ªßa b·∫°n.'),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop(); // ƒê√≥ng dialog
                    Navigator.of(context).pop(true); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc v·ªõi k·∫øt qu·∫£ th√†nh c√¥ng
                  },
                  child: Text('OK'),
                ),
              ],
            );
          },
        );
      } else {
        // Ki·ªÉm tra l·∫°i tr·∫°ng th√°i t√†i x·∫ø ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o ph√π h·ª£p
        if (!_isEditMode) {
          try {
            final response = await _profileService.getUserProfile();
            if (response.success && response.data != null) {
              final UserProfile userProfile = response.data!;
              if (userProfile.status != 'APPROVED') {
                // Hi·ªÉn th·ªã th√¥ng b√°o t√†i x·∫ø ch∆∞a ƒë∆∞·ª£c duy·ªát
                _showDriverNotApprovedDialog();
                return;
              }
            }
          } catch (e) {
            print('L·ªói khi ki·ªÉm tra l·∫°i tr·∫°ng th√°i t√†i x·∫ø: $e');
          }
        }
        
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói m·∫∑c ƒë·ªãnh
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(_isEditMode 
                ? 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t chuy·∫øn ƒëi. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.'
                : 'Kh√¥ng th·ªÉ t·∫°o chuy·∫øn ƒëi. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.'),
            backgroundColor: Colors.red,
            duration: Duration(seconds: 4),
            action: SnackBarAction(
              label: 'Th·ª≠ l·∫°i',
              onPressed: _submitRide,
            ),
          ),
        );
      }
    } catch (e) {
      setState(() {
        _isSubmitting = false;
      });
      
      // ƒê√≥ng dialog x·ª≠ l√Ω n·∫øu ƒëang hi·ªÉn th·ªã
      if (Navigator.of(context).canPop()) {
        Navigator.of(context).pop();
      }
      
      // Ki·ªÉm tra l·ªói ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o ph√π h·ª£p
      if (e.toString().contains('permission') || 
          e.toString().contains('unauthorized') ||
          e.toString().contains('approved')) {
        // Hi·ªÉn th·ªã th√¥ng b√°o t√†i x·∫ø ch∆∞a ƒë∆∞·ª£c duy·ªát
        _showDriverNotApprovedDialog();
      } else {
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chung
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ƒê√£ x·∫£y ra l·ªói: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return SharexeBackground2(
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: AppBar(
          backgroundColor: const Color(0xFF002D72),
          title: const Text('T·∫°o chuy·∫øn ƒëi m·ªõi'),
        ),
        body: Form(
          key: _formKey,
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Card(
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                  ),
                  elevation: 4,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        LocationPicker(
                          title: 'ƒêi·ªÉm ƒëi',
                          icon: Icons.circle_outlined,
                          hintText: 'Xu·∫•t ph√°t t·ª´',
                          initialValue: _departure,
                          onLocationSelected: (location) {
                            setState(() {
                              _departure = location;
                            });
                          },
                        ),
                        const Divider(height: 16),
                        LocationPicker(
                          title: 'ƒêi·ªÉm ƒë·∫øn',
                          icon: Icons.location_on_outlined,
                          hintText: 'ƒêi·ªÉm ƒë·∫øn',
                          initialValue: _destination,
                          onLocationSelected: (location) {
                            setState(() {
                              _destination = location;
                            });
                          },
                        ),
                        const Divider(height: 16),
                        DatePickerField(
                          icon: Icons.access_time,
                          hintText: 'Th·ªùi gian xu·∫•t ph√°t (ng√†y v√† gi·ªù)',
                          initialDate: _departureDate,
                          includeTime: true,
                          onDateSelected: (date) {
                            setState(() {
                              _departureDate = date;
                              print('ƒê√£ ch·ªçn th·ªùi gian: ${DateFormat('dd/MM/yyyy HH:mm').format(date)}');
                            });
                          },
                        ),
                        const Divider(height: 16),
                        PassengerCounter(
                          icon: Icons.people_outline,
                          hintText: 'S·ªë gh·∫ø',
                          initialCount: _totalSeats,
                          maxCount: 8,
                          onCountChanged: (count) {
                            setState(() {
                              _totalSeats = count;
                            });
                          },
                        ),
                        const Divider(height: 16),
                        Row(
                          children: [
                            const Icon(
                              Icons.monetization_on_outlined,
                              color: Colors.grey,
                              size: 20,
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              child: TextFormField(
                                controller: _priceController,
                                decoration: const InputDecoration(
                                  hintText: 'Gi√° m·ªói gh·∫ø (VND)',
                                  border: InputBorder.none,
                                ),
                                keyboardType: TextInputType.number,
                                onChanged: (value) {
                                  setState(() {
                                    _pricePerSeat = double.tryParse(value) ?? 0;
                                  });
                                },
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Vui l√≤ng nh·∫≠p gi√°';
                                  }
                                  if (double.tryParse(value) == null) {
                                    return 'Gi√° kh√¥ng h·ª£p l·ªá';
                                  }
                                  return null;
                                },
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 24),
                SizedBox(
                  width: double.infinity,
                  height: 50,
                  child: ElevatedButton(
                    onPressed: _isSubmitting ? null : _submitRide,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF002D72),
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child:
                        _isSubmitting
                            ? const CircularProgressIndicator(color: Colors.white)
                            : Text(
                              _isEditMode
                                  ? 'C·∫≠p nh·∫≠t chuy·∫øn ƒëi'
                                  : 'T·∫°o chuy·∫øn ƒëi',
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
