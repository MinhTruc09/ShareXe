import 'package:flutter/material.dart';
import 'package:sharexe/services/booking_service.dart';
import 'package:sharexe/services/ride_service.dart';
import 'package:sharexe/models/booking.dart';
import 'package:sharexe/app_route.dart';
import 'package:sharexe/views/widgets/sharexe_background1.dart';
import 'package:flutter/foundation.dart';
import 'package:sharexe/services/notification_service.dart';
import 'package:sharexe/views/widgets/booking_card.dart';
import 'package:sharexe/utils/app_config.dart';
import 'package:sharexe/views/screens/passenger/passenger_main_screen.dart';

class PassengerBookingsScreen extends StatefulWidget {
  const PassengerBookingsScreen({Key? key}) : super(key: key);

  @override
  _PassengerBookingsScreenState createState() =>
      _PassengerBookingsScreenState();
}

class _PassengerBookingsScreenState extends State<PassengerBookingsScreen>
    with SingleTickerProviderStateMixin {
  final BookingService _bookingService = BookingService();
  final RideService _rideService = RideService();
  final NotificationService _notificationService = NotificationService();

  late TabController _tabController;
  List<BookingDTO> _upcomingBookings = [];
  List<BookingDTO> _inProgressBookings = []; // Chuy·∫øn ƒëi ƒëang di·ªÖn ra
  List<BookingDTO> _completedBookings = [];
  List<BookingDTO> _cancelledOrExpiredBookings =
      []; // Chuy·∫øn ƒë√£ h·ªßy ho·∫∑c h·∫øt h·∫°n
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(
      length: 4,
      vsync: this,
    ); // Th√™m tab cho chuy·∫øn ƒëi ƒëang di·ªÖn ra
    _loadBookings();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  // Ki·ªÉm tra xem booking c√≥ h·∫øt h·∫°n hay kh√¥ng (qu√° ng√†y ƒëi m√† ch∆∞a ƒë∆∞·ª£c ch·∫•p nh·∫≠n)
  bool _isBookingExpired(BookingDTO booking) {
    final DateTime now = DateTime.now();
    final DateTime startTime = booking.startTime;

    // N·∫øu startTime ƒë√£ qua v√† booking v·∫´n PENDING, th√¨ coi nh∆∞ ƒë√£ h·∫øt h·∫°n
    return now.isAfter(startTime) && booking.status == 'PENDING';
  }

  // Ph√¢n lo·∫°i bookings theo tr·∫°ng th√°i
  Future<void> _loadBookings() async {
    if (mounted) {
      setState(() {
        _isLoading = true;
      });
    }

    try {
      print('üîç ƒêang t·∫£i danh s√°ch bookings c·ªßa h√†nh kh√°ch...');

      // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch bookings
      final bookings = await _bookingService.getPassengerBookingsDTO();

      if (bookings.isEmpty) {
        print('‚ÑπÔ∏è Kh√¥ng c√≥ bookings n√†o ƒë∆∞·ª£c t√¨m th·∫•y');
      } else {
        print('‚úÖ ƒê√£ t·∫£i ${bookings.length} bookings');
      }

      // Ph√¢n lo·∫°i bookings
      final List<BookingDTO> upcoming = [];
      final List<BookingDTO> inProgress = [];
      final List<BookingDTO> completed = [];
      final List<BookingDTO> cancelledOrExpired = [];

      for (var booking in bookings) {
        print(
          'Ph√¢n lo·∫°i booking #${booking.id}: ${booking.status}, ng√†y ƒëi: ${booking.startTime}',
        );
        final status = booking.status.toUpperCase();

        // Ph√¢n lo·∫°i theo tr·∫°ng th√°i theo enum BookingStatus
        if (status == 'CANCELLED' || status == 'REJECTED' || _isBookingExpired(booking)) {
          // CANCELLED, REJECTED ho·∫∑c h·∫øt h·∫°n -> tab "ƒê√£ h·ªßy"
          cancelledOrExpired.add(booking);
        } else if (status == 'COMPLETED') {
          // COMPLETED -> tab "Ho√†n th√†nh"
          completed.add(booking);
        } else if (status == 'IN_PROGRESS' || status == 'PASSENGER_CONFIRMED' || status == 'DRIVER_CONFIRMED') {
          // IN_PROGRESS, PASSENGER_CONFIRMED, DRIVER_CONFIRMED -> tab "ƒêang ƒëi"
          inProgress.add(booking);
        } else if (status == 'PENDING' || status == 'ACCEPTED') {
          // PENDING (ch·ªù duy·ªát), ACCEPTED (ƒë√£ duy·ªát) -> tab "S·∫Øp t·ªõi"
          upcoming.add(booking);
        } else {
          // C√°c tr·∫°ng th√°i kh√°c ch∆∞a x√°c ƒë·ªãnh, t·∫°m th·ªùi ƒë∆∞a v√†o upcoming
          print('‚ö†Ô∏è Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh: $status cho booking #${booking.id}');
          upcoming.add(booking);
        }
      }

      if (mounted) {
        setState(() {
          _upcomingBookings = upcoming;
          _inProgressBookings = inProgress;
          _completedBookings = completed;
          _cancelledOrExpiredBookings = cancelledOrExpired;
          _isLoading = false;
        });
      }
    } catch (e) {
      print('‚ùå L·ªói khi t·∫£i bookings: $e');
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng h·ªßy booking
  Future<void> _handleCancelBooking(BookingDTO booking) async {
    // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
    bool? confirmCancel = await showDialog<bool>(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text('X√°c nh·∫≠n h·ªßy'),
            content: const Text(
              'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy booking n√†y kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.',
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: const Text('Kh√¥ng'),
              ),
              TextButton(
                onPressed: () => Navigator.pop(context, true),
                child: const Text('C√≥, h·ªßy booking'),
                style: TextButton.styleFrom(foregroundColor: Colors.red),
              ),
            ],
          ),
    );

    if (confirmCancel != true) return;

    // Hi·ªÉn th·ªã loading
    setState(() {
      _isLoading = true;
    });

    try {
      // G·ªçi API ƒë·ªÉ h·ªßy booking
      final success = await _bookingService.cancelBookingDTO(booking.rideId);

      if (success) {
        // G·ª≠i th√¥ng b√°o cho t√†i x·∫ø
        try {
          // S·ª≠ d·ª•ng sendNotification thay th·∫ø v√¨ Booking kh√¥ng c√≥ ƒë·ªß c√°c tr∆∞·ªùng
          await _notificationService.sendNotification(
            'Booking ƒë√£ b·ªã h·ªßy',
            'H√†nh kh√°ch ${booking.passengerName} ƒë√£ h·ªßy booking cho chuy·∫øn ƒëi t·ª´ ${booking.departure} ƒë·∫øn ${booking.destination}',
            AppConfig.NOTIFICATION_BOOKING_CANCELLED,
            {'bookingId': booking.id, 'rideId': booking.rideId},
            recipientEmail: booking.driverEmail,
          );
        } catch (e) {
          print('‚ùå L·ªói khi g·ª≠i th√¥ng b√°o h·ªßy booking: $e');
          // Kh√¥ng d·ª´ng quy tr√¨nh v√¨ ƒë√¢y kh√¥ng ph·∫£i l·ªói ch√≠nh
        }

        // L√†m m·ªõi danh s√°ch bookings
        await _loadBookings();

        // Th√¥ng b√°o cho PassengerMainScreen ƒë·ªÉ l√†m m·ªõi danh s√°ch chuy·∫øn ƒëi
        try {
          // L·∫•y TabNavigator instance t·ª´ context
          final tabNavigator = TabNavigator.of(context);
          if (tabNavigator != null) {
            print(
              '‚úÖ T√¨m th·∫•y TabNavigator, y√™u c·∫ßu l√†m m·ªõi danh s√°ch chuy·∫øn ƒëi',
            );
            tabNavigator.refreshHomeTab();
          } else {
            print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y TabNavigator ƒë·ªÉ l√†m m·ªõi danh s√°ch');
            // Th·ª≠ c√°ch kh√°c - navigate v·ªÅ m√†n h√¨nh ch√≠nh
            Navigator.pushNamedAndRemoveUntil(
              context,
              PassengerRoutes.home,
              (route) => false,
            );
          }
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi l√†m m·ªõi danh s√°ch chuy·∫øn ƒëi: $e');
          // Kh√¥ng d·ª´ng quy tr√¨nh v√¨ ƒë√¢y kh√¥ng ph·∫£i l·ªói ch√≠nh
        }

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('ƒê√£ h·ªßy booking th√†nh c√¥ng'),
              backgroundColor: Colors.green,
            ),
          );
        }
      } else {
        if (mounted) {
          setState(() {
            _isLoading = false;
          });

          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Kh√¥ng th·ªÉ h·ªßy booking. Vui l√≤ng th·ª≠ l·∫°i sau.'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      print('‚ùå L·ªói khi h·ªßy booking: $e');
      if (mounted) {
        setState(() {
          _isLoading = false;
        });

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ƒê√£ x·∫£y ra l·ªói: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'L·ªãch s·ª≠ Booking',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        bottom: TabBar(
          controller: _tabController,
          labelStyle: const TextStyle(fontWeight: FontWeight.bold),
          tabs: const [
            Tab(text: 'S·∫Øp t·ªõi'),
            Tab(text: 'ƒêang ƒëi'),
            Tab(text: 'Ho√†n th√†nh'),
            Tab(text: 'ƒê√£ h·ªßy'),
          ],
        ),
      ),
      body: SharexeBackground1(
        child:
            _isLoading
                ? const Center(child: CircularProgressIndicator())
                : RefreshIndicator(
                  onRefresh: _loadBookings,
                  child: TabBarView(
                    controller: _tabController,
                    children: [
                      // S·∫Øp t·ªõi - PENDING (ch·ªù duy·ªát), ACCEPTED (ƒë√£ duy·ªát)
                      _buildBookingList(_upcomingBookings, 'S·∫Øp t·ªõi'),

                      // ƒêang ƒëi - IN_PROGRESS, PASSENGER_CONFIRMED, DRIVER_CONFIRMED
                      _buildBookingList(_inProgressBookings, 'ƒêang ƒëi'),

                      // Ho√†n th√†nh - COMPLETED
                      _buildBookingList(_completedBookings, 'Ho√†n th√†nh'),

                      // ƒê√£ h·ªßy - CANCELLED, REJECTED, h·∫øt h·∫°n
                      _buildBookingList(_cancelledOrExpiredBookings, 'ƒê√£ h·ªßy'),
                    ],
                  ),
                ),
      ),
    );
  }

  // Hi·ªÉn th·ªã danh s√°ch bookings
  Widget _buildBookingList(List<BookingDTO> bookings, String title) {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (bookings.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.hourglass_empty, size: 64, color: Colors.grey),
            const SizedBox(height: 16),
            Text(
              'Kh√¥ng c√≥ booking n√†o' + (title.isNotEmpty ? ' $title' : ''),
              style: TextStyle(fontSize: 16, color: Colors.grey.shade600),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: _loadBookings,
              icon: const Icon(Icons.refresh),
              label: const Text('L√†m m·ªõi'),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                  vertical: 12,
                ),
              ),
            ),
          ],
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: _loadBookings,
      child: ListView.builder(
        itemCount: bookings.length,
        padding: const EdgeInsets.all(16),
        itemBuilder: (context, index) {
          final booking = bookings[index];
          return BookingCard(
            booking: booking,
            onTap: () => _navigateToBookingDetails(booking),
            showCancelButton: _canCancel(booking),
            onCancel: () => _handleCancelBooking(booking),
            onConfirmComplete:
                _canConfirmComplete(booking)
                    ? () => _handleConfirmCompletion(booking)
                    : null,
          );
        },
      ),
    );
  }

  // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn chi ti·∫øt booking
  Future<void> _navigateToBookingDetails(BookingDTO booking) async {
    try {
      // T·∫£i chi ti·∫øt chuy·∫øn ƒëi t·ª´ booking
      final rideDetails = await _rideService.getRideDetails(booking.rideId);
      
      if (mounted && rideDetails != null) {
        // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh chi ti·∫øt chuy·∫øn ƒëi
        await Navigator.pushNamed(
          context,
          AppRoute.rideDetails,
          arguments: rideDetails,
        );
        
        // L√†m m·ªõi danh s√°ch booking sau khi quay l·∫°i
        _loadBookings();
      } else {
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c chi ti·∫øt chuy·∫øn ƒëi
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt chuy·∫øn ƒëi'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('L·ªói: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  bool _canCancel(BookingDTO booking) {
    // Ch·ªâ cho ph√©p h·ªßy c√°c booking c√≥ tr·∫°ng th√°i PENDING ho·∫∑c ACCEPTED v√† ch∆∞a ƒë·∫øn gi·ªù kh·ªüi h√†nh
    final status = booking.status.toUpperCase();
    final now = DateTime.now();
    return (status == 'PENDING' || status == 'ACCEPTED') &&
        now.isBefore(booking.startTime);
  }

  bool _canConfirmComplete(BookingDTO booking) {
    // X√°c ƒë·ªãnh xem booking c√≥ th·ªÉ ƒë∆∞·ª£c x√°c nh·∫≠n ho√†n th√†nh kh√¥ng
    final status = booking.status.toUpperCase();
    final now = DateTime.now();

    // Ch·ªâ cho ph√©p x√°c nh·∫≠n ho√†n th√†nh n·∫øu:
    // - Tr·∫°ng th√°i l√† DRIVER_CONFIRMED (t√†i x·∫ø ƒë√£ x√°c nh·∫≠n, ch·ªù kh√°ch x√°c nh·∫≠n)
    // - Tr·∫°ng th√°i l√† IN_PROGRESS v√† ƒë√£ ƒë·∫øn gi·ªù kh·ªüi h√†nh
    return (status == 'DRIVER_CONFIRMED') ||
        (status == 'IN_PROGRESS' && now.isAfter(booking.startTime));
  }

  Future<void> _handleConfirmCompletion(BookingDTO booking) async {
    try {
      setState(() {
        _isLoading = true;
      });

      // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
      final bool? confirmResult = await showDialog<bool>(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: const Text('X√°c nh·∫≠n ho√†n th√†nh'),
            content: const Text('B·∫°n x√°c nh·∫≠n ƒë√£ ho√†n th√†nh chuy·∫øn ƒëi n√†y?'),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: const Text('H·ªßy'),
              ),
              TextButton(
                onPressed: () => Navigator.pop(context, true),
                child: const Text('X√°c nh·∫≠n'),
                style: TextButton.styleFrom(foregroundColor: Colors.green),
              ),
            ],
          );
        },
      );

      if (confirmResult != true) {
        setState(() {
          _isLoading = false;
        });
        return;
      }

      // G·ªçi API ƒë·ªÉ x√°c nh·∫≠n ho√†n th√†nh
      final result = await _bookingService.passengerConfirmCompletionDTO(
        booking.id,
      );

      if (result) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('ƒê√£ x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi th√†nh c√¥ng'),
            backgroundColor: Colors.green,
          ),
        );

        // G·ª≠i th√¥ng b√°o cho t√†i x·∫ø (n·∫øu c·∫ßn)
        try {
          await _notificationService.sendNotification(
            'H√†nh kh√°ch ƒë√£ x√°c nh·∫≠n ho√†n th√†nh',
            'H√†nh kh√°ch ${booking.passengerName} ƒë√£ x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi.',
            AppConfig.NOTIFICATION_PASSENGER_CONFIRMED,
            {'bookingId': booking.id, 'rideId': booking.rideId},
            recipientEmail: booking.driverEmail,
          );
        } catch (e) {
          print('‚ùå L·ªói khi g·ª≠i th√¥ng b√°o: $e');
          // Kh√¥ng d·ª´ng quy tr√¨nh v√¨ ƒë√¢y kh√¥ng ph·∫£i l·ªói ch√≠nh
        }

        // L√†m m·ªõi danh s√°ch bookings
        await _loadBookings();
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Kh√¥ng th·ªÉ x√°c nh·∫≠n ho√†n th√†nh. Vui l√≤ng th·ª≠ l·∫°i.'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      print('‚ùå L·ªói khi x√°c nh·∫≠n ho√†n th√†nh chuy·∫øn ƒëi: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ƒê√£ x·∫£y ra l·ªói: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
}
